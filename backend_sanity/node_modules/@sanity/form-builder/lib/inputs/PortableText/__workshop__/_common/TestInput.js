"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestInput = TestInput;
var _react = _interopRequireWildcard(require("react"));
var _FormBuilderContext = _interopRequireDefault(require("../../../../FormBuilderContext"));
var _PortableTextInput = require("../../PortableTextInput");
var _simplePatch = require("../../../../simplePatch");
var _useUnique = require("../../utils/useUnique");
var _ReviewChangesProvider = require("../../../../sanity/contexts/reviewChanges/ReviewChangesProvider");
var _input = require("./input");
var _resolvePreviewComponent = require("./resolvePreviewComponent");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function TestInput(props) {
  var propsMarkers = props.markers,
    _props$readOnly = props.readOnly,
    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
    renderBlockActions = props.renderBlockActions,
    renderCustomMarkers = props.renderCustomMarkers,
    type = props.type,
    propsValue = props.value,
    _props$withError = props.withError,
    withError = _props$withError === void 0 ? false : _props$withError,
    _props$withWarning = props.withWarning,
    withWarning = _props$withWarning === void 0 ? false : _props$withWarning,
    _props$withCustomMark = props.withCustomMarkers,
    withCustomMarkers = _props$withCustomMark === void 0 ? false : _props$withCustomMark;
  var _useState = (0, _react.useState)(propsValue),
    _useState2 = _slicedToArray(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  var _useState3 = (0, _react.useState)([]),
    _useState4 = _slicedToArray(_useState3, 2),
    focusPath = _useState4[0],
    setFocusPath = _useState4[1];
  var blockType = (0, _react.useMemo)(() => type.of.find(t => t.type.name === 'block'), [type]);
  var presence = (0, _react.useMemo)(() => [], []);
  var hotkeys = (0, _react.useMemo)(() => ({}), []);
  var _useState5 = (0, _react.useState)(propsMarkers || []),
    _useState6 = _slicedToArray(_useState5, 2),
    markers = _useState6[0],
    setMarkers = _useState6[1];
  var uniqMarkers = (0, _useUnique.useUnique)(markers);
  var onFocus = (0, _react.useCallback)(path => {
    setFocusPath(path);
  }, []);
  var onBlur = (0, _react.useCallback)(() => {
    setFocusPath([]);
  }, []);
  var onChange = (0, _react.useCallback)(event => {
    setValue(prevValue => (0, _simplePatch.applyAll)(prevValue, event.patches));
  }, []);
  (0, _react.useEffect)(() => {
    if (value) {
      var newMarkers = [...(propsMarkers || [])];
      value.forEach(blk => {
        if (blk._type === blockType.name) {
          var inline = blk.children.find(child => child._type !== 'span');
          var annotation = blk.markDefs[0];
          if (inline) {
            if (withError) {
              newMarkers.push({
                type: 'validation',
                level: 'error',
                path: [{
                  _key: blk._key
                }, 'children', {
                  _key: inline._key
                }],
                item: {
                  message: 'There is an error with this inline object'
                }
              });
            }
            if (withWarning) {
              newMarkers.push({
                type: 'validation',
                level: 'warning',
                path: [{
                  _key: blk._key
                }, 'children', {
                  _key: inline._key
                }],
                item: {
                  message: 'This is a warning'
                }
              });
            }
            if (withCustomMarkers) {
              newMarkers.push({
                type: 'customMarkerTest',
                path: [{
                  _key: blk._key
                }, 'children', {
                  _key: inline._key
                }]
              });
            }
          } else if (annotation) {
            if (withError) {
              newMarkers.push({
                type: 'validation',
                level: 'error',
                path: [{
                  _key: blk._key
                }, 'markDefs', {
                  _key: annotation._key
                }],
                item: {
                  message: 'There an error with this annotation'
                }
              });
            }
            if (withWarning) {
              newMarkers.push({
                type: 'validation',
                level: 'warning',
                path: [{
                  _key: blk._key
                }, 'markDefs', {
                  _key: annotation._key
                }],
                item: {
                  message: 'This is a warning'
                }
              });
            }
            if (withCustomMarkers) {
              newMarkers.push({
                type: 'customMarkerTest',
                path: [{
                  _key: blk._key
                }, 'markDefs', {
                  _key: annotation._key
                }]
              });
            }
          } else {
            if (withError) {
              newMarkers.push({
                type: 'validation',
                level: 'error',
                path: [{
                  _key: blk._key
                }],
                item: {
                  message: 'There is an error with this textblock'
                }
              });
            }
            if (withWarning) {
              newMarkers.push({
                type: 'validation',
                level: 'warning',
                path: [{
                  _key: blk._key
                }],
                item: {
                  message: 'This is a warning'
                }
              });
            }
            if (withCustomMarkers) {
              newMarkers.push({
                type: 'customMarkerTest',
                path: [{
                  _key: blk._key
                }]
              });
            }
          }
        } else {
          if (withError) {
            newMarkers.push({
              type: 'validation',
              level: 'error',
              path: [{
                _key: blk._key
              }, 'title'],
              item: {
                message: 'There is an error with this object block'
              }
            });
          }
          if (withWarning) {
            newMarkers.push({
              type: 'validation',
              level: 'warning',
              path: [{
                _key: blk._key
              }, 'title'],
              item: {
                message: 'This is a warning'
              }
            });
          }
          if (withCustomMarkers) {
            newMarkers.push({
              type: 'customMarkerTest',
              path: [{
                _key: blk._key
              }]
            });
          }
        }
      });
      setMarkers(newMarkers);
    }
    if (!withError && !withCustomMarkers && !withWarning) {
      setMarkers(propsMarkers || []);
    }
  }, [blockType.name, propsMarkers, value, withCustomMarkers, withError, withWarning]);
  var patchChannel = (0, _react.useMemo)(() => {
    return {
      onPatch: () => () => undefined
    };
  }, []);
  var subscribe = (0, _react.useCallback)(() => () => undefined, []);
  (0, _react.useEffect)(() => {
    setValue(props.value);
  }, [props.value]);
  return /*#__PURE__*/_react.default.createElement(_ReviewChangesProvider.ReviewChangesContextProvider, {
    changesOpen: false
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderContext.default, {
    value: value,
    patchChannel: patchChannel,
    schema: props.schema,
    resolveInputComponent: _input.inputResolver,
    resolvePreviewComponent: _resolvePreviewComponent.resolvePreviewComponent
  }, /*#__PURE__*/_react.default.createElement(_PortableTextInput.PortableTextInput, {
    focusPath: focusPath,
    hotkeys: hotkeys,
    level: 1,
    markers: uniqMarkers,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    presence: presence,
    readOnly: readOnly,
    renderBlockActions: renderBlockActions,
    renderCustomMarkers: renderCustomMarkers,
    subscribe: subscribe,
    type: props.type,
    value: value,
    compareValue: undefined
  })));
}