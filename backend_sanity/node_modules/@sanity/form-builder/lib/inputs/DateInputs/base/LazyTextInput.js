"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LazyTextInput = void 0;
var _react = _interopRequireDefault(require("react"));
var _ui = require("@sanity/ui");
var _excluded = ["onChange", "onBlur", "onKeyPress", "value"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/**
 * A TextInput that only emit onChange when it has to
 * By default it will only emit onChange when: 1) user hits enter or 2) user leaves the
 * field (e.g. onBlur) and the input value at this time is different from the given `value` prop
 */
var LazyTextInput = /*#__PURE__*/_react.default.forwardRef(function LazyTextInput(_ref, forwardedRef) {
  var onChange = _ref.onChange,
    onBlur = _ref.onBlur,
    onKeyPress = _ref.onKeyPress,
    value = _ref.value,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _React$useState = _react.default.useState(),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    inputValue = _React$useState2[0],
    setInputValue = _React$useState2[1];
  var handleChange = _react.default.useCallback(event => {
    setInputValue(event.currentTarget.value);
  }, []);
  var checkEvent = _react.default.useCallback(event => {
    var currentValue = event.currentTarget.value;
    if (currentValue !== "".concat(value)) {
      if (onChange) {
        onChange(event);
      }
    }
    setInputValue(undefined);
  }, [onChange, value]);
  var handleBlur = _react.default.useCallback(e => {
    checkEvent(e);
    if (onBlur) {
      onBlur(e);
    }
  }, [checkEvent, onBlur]);
  var handleKeyPress = _react.default.useCallback(e => {
    if (e.key === 'Enter') {
      checkEvent(e);
    }
    if (onKeyPress) {
      onKeyPress(e);
    }
  }, [checkEvent, onKeyPress]);
  return /*#__PURE__*/_react.default.createElement(_ui.TextInput, _extends({}, rest, {
    "data-testid": "date-input",
    ref: forwardedRef,
    value: inputValue === undefined ? value : inputValue,
    onChange: handleChange,
    onBlur: handleBlur,
    onKeyPress: handleKeyPress
  }));
});
exports.LazyTextInput = LazyTextInput;