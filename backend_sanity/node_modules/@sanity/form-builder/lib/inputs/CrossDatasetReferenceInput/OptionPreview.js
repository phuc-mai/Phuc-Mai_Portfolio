"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OptionPreview = OptionPreview;
var _react = _interopRequireWildcard(require("react"));
var _ui = require("@sanity/ui");
var _Alert = require("../../components/Alert");
var _useReferenceInfo2 = require("./useReferenceInfo");
var _CrossDatasetReferencePreview = require("./CrossDatasetReferencePreview");
var _getProjectId = require("./utils/getProjectId");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable max-nested-callbacks,no-nested-ternary */

/**
 * Used to preview a referenced type
 * Takes as props the referenced document, the reference type and a hook to subscribe to
 * in order to listen for the reference info
 * @param props
 * @constructor
 */
function OptionPreview(props) {
  var projectId = (0, _react.useMemo)(() => (0, _getProjectId.getProjectId)(), []);
  var _useReferenceInfo = (0, _useReferenceInfo2.useReferenceInfo)(props.document, props.getReferenceInfo),
    isLoading = _useReferenceInfo.isLoading,
    referenceInfo = _useReferenceInfo.result,
    error = _useReferenceInfo.error;
  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 320
      },
      radius: 1,
      animated: true
    }), /*#__PURE__*/_react.default.createElement(_ui.TextSkeleton, {
      style: {
        maxWidth: 200
      },
      radius: 1,
      size: 1,
      animated: true
    }));
  }
  if (error) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, /*#__PURE__*/_react.default.createElement(_Alert.Alert, {
      title: "Failed to load referenced document"
    }, "Error: ", error.message));
  }
  if (!referenceInfo) {
    return null;
  }
  if (referenceInfo.availability.reason === 'PERMISSION_DENIED') {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Insufficient permissions to view this document");
  }
  var refType = props.referenceType.to.find(toEntry => toEntry.type === referenceInfo.type);
  if (!refType) {
    return /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2,
      padding: 1
    }, "Search returned a type that's not valid for this reference: \"$", referenceInfo.type, "\"");
  }
  return referenceInfo && refType && /*#__PURE__*/_react.default.createElement(_CrossDatasetReferencePreview.CrossDatasetReferencePreview, {
    id: referenceInfo.id,
    availability: referenceInfo.availability,
    preview: referenceInfo.preview,
    refType: refType,
    dataset: props.referenceType.dataset,
    projectId: projectId,
    showTypeLabel: props.referenceType.to.length > 1
  });
}