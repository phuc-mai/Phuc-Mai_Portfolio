"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentTypeListBuilder = void 0;
var _DocumentList = require("./DocumentList");
var _Intent = require("./Intent");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class DocumentTypeListBuilder extends _DocumentList.DocumentListBuilder {
  constructor(spec) {
    super();
    _defineProperty(this, "spec", void 0);
    this.spec = spec ? spec : {};
  }
  child(child) {
    return this.cloneWithoutDefaultIntentHandler({
      child
    });
  }
  clone(withSpec) {
    var parent = super.clone(withSpec);
    var builder = new DocumentTypeListBuilder();
    builder.spec = _objectSpread(_objectSpread(_objectSpread({}, this.spec), parent.getSpec()), withSpec || {});
    return builder;
  }
  cloneWithoutDefaultIntentHandler(withSpec) {
    var parent = super.clone(withSpec);
    var builder = new DocumentTypeListBuilder();
    var canHandleIntent = this.spec.canHandleIntent;
    var shouldOverride = canHandleIntent && canHandleIntent.identity === _Intent.DEFAULT_INTENT_HANDLER;
    var override = shouldOverride ? {
      canHandleIntent: undefined
    } : {};
    builder.spec = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, parent.getSpec()), this.spec), withSpec || {}), override);
    return builder;
  }
}
exports.DocumentTypeListBuilder = DocumentTypeListBuilder;