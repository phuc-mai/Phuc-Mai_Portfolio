{"version":3,"file":"index.esm.js","sources":["../src/utils/schema.ts","../src/utils/getPortableTextFeatures.ts","../../../../node_modules/diff-match-patch/index.js","../src/patch/patches.ts","../src/utils/validateValue.ts","../src/utils/debug.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/constants.ts","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/hooks/usePortableTextEditorSelection.ts","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/usePortableTextEditorValue.ts","../src/utils/operationToPatches.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/utils/withPreserveKeys.ts","../src/editor/plugins/createWithObjectKeys.ts","../src/utils/withoutPatching.ts","../src/patch/arrayInsert.ts","../src/patch/array.ts","../src/patch/object.ts","../src/patch/primitive.ts","../src/patch/string.ts","../src/patch/applyPatch.ts","../src/utils/patchToOperations.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/PortableTextEditor.tsx","../src/utils/patches.ts","../src/utils/selection.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/editor/DraggableChild.tsx","../src/editor/Leaf.tsx","../src/editor/nodes/index.ts","../src/editor/nodes/TextBlock.tsx","../src/editor/nodes/DefaultObject.tsx","../src/editor/DraggableBlock.tsx","../src/editor/Element.tsx","../src/editor/hooks/useForwardedRef.ts","../src/editor/Editable.tsx"],"sourcesContent":["import Schema from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {ArraySchemaType, ObjectSchemaType, SchemaType} from '@sanity/types'\nimport {PortableTextBlock, PortableTextFeatures} from '../types/portableText'\nimport {Type} from '../types/schema'\n\nexport function getPortableTextFeatures(\n  portabletextType: ArraySchemaType<PortableTextBlock>\n): PortableTextFeatures {\n  if (!portabletextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portabletextType.of?.find(findBlockType) as ObjectSchemaType | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find((field) => field.name === 'children') as\n    | {type: ArraySchemaType}\n    | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error('Valid types for block children not found in schema (required)')\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter((memberType) => memberType.name !== 'span') ||\n    []) as ObjectSchemaType[]\n  const blockObjectTypes = (portabletextType.of?.filter((field) => field.name !== blockType.name) ||\n    []) as ObjectSchemaType[]\n  const annotations = resolveEnabledAnnotationTypes(spanType)\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    annotations: annotations,\n    types: {\n      block: blockType,\n      span: spanType,\n      portableText: portabletextType,\n      inlineObjects: inlineObjectTypes,\n      blockObjects: blockObjectTypes,\n      annotations: annotations.map((an: Type) => an.type),\n    },\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find((btField) => btField.name === 'style')\n  if (!styleField) {\n    throw new Error(\"A field with name 'style' is not defined in the block type (required).\")\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter((style: {value: string}) => style.value)\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\"\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledAnnotationTypes(spanType: ObjectSchemaType) {\n  return (spanType as any).annotations.map((annotation: Type) => {\n    return {\n      blockEditor: annotation.blockEditor,\n      portableText: annotation.portableText,\n      title: annotation.title,\n      type: annotation,\n      value: annotation.name,\n      icon: annotation.icon,\n    }\n  })\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find((btField) => btField.name === 'list')\n  if (!listField) {\n    throw new Error(\"A field with name 'list' is not defined in the block type (required).\")\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): ObjectSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as ObjectSchemaType\n  }\n\n  return null\n}\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","import {Path, PathSegment} from '@sanity/types'\nimport * as DMP from 'diff-match-patch'\n\nimport type {\n  SetIfMissingPatch,\n  InsertPatch,\n  InsertPosition,\n  SetPatch,\n  UnsetPatch,\n  DiffMatchPatch,\n} from '../types/patch'\n\nexport function setIfMissing(value: any, path: Path = []): SetIfMissingPatch {\n  return {\n    type: 'setIfMissing',\n    path,\n    value,\n  }\n}\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function diffMatchPatch(\n  currentValue: string,\n  nextValue: string,\n  path: Path = []\n): DiffMatchPatch {\n  const patch = dmp\n    .patch_make(currentValue, nextValue)\n    .map((_patch) => _patch.toString())\n    .join('')\n  return {type: 'diffMatchPatch', path, value: patch}\n}\n\nexport function insert(items: any[], position: InsertPosition, path: Path = []): InsertPatch {\n  return {\n    type: 'insert',\n    path,\n    position,\n    items,\n  }\n}\n\nexport function set(value: any, path: Path = []): SetPatch {\n  return {type: 'set', path, value}\n}\n\nexport function unset(path: Path = []): UnsetPatch {\n  return {type: 'unset', path}\n}\n\nexport function prefixPath<T extends {path: Path}>(patch: T, segment: PathSegment): T {\n  return {\n    ...patch,\n    path: [segment, ...patch.path],\n  }\n}\n","import {flatten, isObject, uniq} from 'lodash'\nimport {set, unset, insert} from '../patch/PatchEvent'\nimport {PortableTextBlock, PortableTextChild, PortableTextFeatures} from '../types/portableText'\nimport {InvalidValueResolution} from '../types/editor'\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n): {valid: boolean; resolution: InvalidValueResolution | null} {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    ...[portableTextFeatures.types.span.name],\n    ...portableTextFeatures.types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    ...[portableTextFeatures.types.block.name],\n    ...portableTextFeatures.types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null}\n  }\n  // Only lengthy arrays are allowed \"inside\" the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description: 'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n      },\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      if (!isObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has a _key\n      if (!blk._key) {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = portableTextFeatures.types.block.name\n          resolution = {\n            patches: [set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n          }\n          return true\n        }\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n        }\n        return true\n      }\n      // Test that every child in text block is valid\n      if (blk._type === portableTextFeatures.types.block.name) {\n        // Test that it has children\n        if (!blk.children) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Text block with _key '${blk._key}' is missing required key 'children'.`,\n            action: 'Remove the block',\n            item: blk,\n          }\n          return true\n        }\n        // Test that markDefs exists\n        if (!blk.markDefs) {\n          resolution = {\n            patches: [set({...blk, markDefs: []}, [{_key: blk._key}])],\n            description: `Block is missing required key 'markDefs'.`,\n            action: 'Add empty markDefs array',\n            item: blk,\n          }\n          return true\n        }\n\n        // // Test that every span has .marks\n        // const spansWithUndefinedMarks = blk.children\n        //   .filter(cld => cld._type === portableTextFeatures.types.span.name)\n        //   .filter(cld => typeof cld.marks === 'undefined')\n\n        // if (spansWithUndefinedMarks.length > 0) {\n        //   const first = spansWithUndefinedMarks[0]\n        //   resolution = {\n        //     patches: [\n        //       set({...first, marks: []}, [{_key: blk._key}, 'children', {_key: first._key}])\n        //     ],\n        //     description: `Span has no .marks array`,\n        //     action: 'Add empty marks array',\n        //     item: first\n        //   }\n        //   return true\n        // }\n        const allUsedMarks: string[] = uniq(\n          flatten(\n            blk.children\n              .filter((cld: any) => cld._type === portableTextFeatures.types.span.name)\n              .map((cld: any) => cld.marks || [])\n          )\n        )\n        // // Test that all markDefs are in use\n        // if (blk.markDefs && blk.markDefs.length > 0) {\n        //   const unusedMarkDefs: string[] = uniq(\n        //     blk.markDefs.map(def => def._key).filter(key => !allUsedMarks.includes(key))\n        //   )\n        //   if (unusedMarkDefs.length > 0) {\n        //     resolution = {\n        //       patches: unusedMarkDefs.map(key =>\n        //         unset([{_key: blk._key}, 'markDefs', {_key: key}])\n        //       ),\n        //       description: `Block has unused mark definitions: ${unusedMarkDefs.join(', ')}.`,\n        //       action: 'Remove unused markDefs',\n        //       item: blk\n        //     }\n        //     return true\n        //   }\n        // }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !portableTextFeatures.decorators.map((dec) => dec.value).includes(mark)\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) => !blk.markDefs.find((def: any) => def._key === mark)\n        )\n        if (orphanedMarks.length > 0) {\n          const children = blk.children.filter(\n            (cld: any) =>\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark: any) => orphanedMarks.includes(mark))\n          ) as PortableTextChild[]\n          if (children) {\n            resolution = {\n              patches: children.map((child) => {\n                return set(\n                  child.marks.filter((cmrk: any) => !orphanedMarks.includes(cmrk)),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks']\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphanedMarks.join(\n                ', '\n              )}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n            }\n            return true\n          }\n        }\n\n        // Test that children is lengthy\n        if (blk.children && blk.children.length === 0) {\n          const newSpan = {\n            _type: portableTextFeatures.types.span.name,\n            _key: keyGenerator(),\n            text: '',\n          }\n          resolution = {\n            patches: [insert([newSpan], 'after', [{_key: blk._key}, 'children', 0])],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n          }\n          return true\n        }\n        // Test every child\n        if (\n          blk.children.some((child: any, cIndex: number) => {\n            if (!child._key) {\n              const newchild = {...child, _key: keyGenerator()}\n              resolution = {\n                patches: [set(newchild, [{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that childs have valid types\n            if (!child._type || validChildTypes.includes(child._type) === false) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', {_key: child._key}])],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n              }\n              return true\n            }\n            // Verify that spans have .text\n            if (child._type === portableTextFeatures.types.span.name && child.text === undefined) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing text property!`,\n                action: `Write an empty .text to the object`,\n                item: blk,\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution}\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isEqual} from 'lodash'\nimport {Node, Element, Text, Descendant} from 'slate'\nimport {PathSegment} from '@sanity/types'\nimport {\n  MarkDef,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextFeatures,\n  TextBlock,\n} from '../types/portableText'\n\nconst EMPTY_MARKDEFS: MarkDef[] = []\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {portableTextFeatures}: {portableTextFeatures: PortableTextFeatures},\n  keyMap: Record<string, any> = {}\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [{_key: `${_key}-void-child`, _type: 'span', text: '', marks: []}]\n      const isPortableText = block && block._type === portableTextFeatures.types.block.name\n      if (isPortableText) {\n        const textBlock = block as TextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const children = textBlock.children.map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap\n            )\n          }\n          // Original object\n          return child\n        })\n        if (!hasMissingStyle && !hasMissingMarkDefs && !hasInlines && Element.isElement(block)) {\n          // Original object\n          return block\n        }\n        if (hasMissingStyle) {\n          rest.style = portableTextFeatures.styles[0].value\n        }\n        if (hasMissingMarkDefs) {\n          rest.markDefs = EMPTY_MARKDEFS\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: (Node | Partial<Node>)[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {}\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (_type === textBlockType && 'children' in block && Array.isArray(block.children) && _key) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest} = child\n          return keepObjectEquality({...rest, ...v, _key: k as string, _type: t as string}, keyMap)\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality({...block, children, _key, _type}, keyMap) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  portableTextFeatures: PortableTextFeatures\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === portableTextFeatures.types.block.name &&\n      'style' in children[0] &&\n      children[0].style === portableTextFeatures.styles[0].value &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[]\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) => Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment)\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) => isEqual({_key: child._key}, secondPathSegment))\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[]\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Editor, Element, Range} from 'slate'\nimport {EditorSelection} from '..'\n\n/**\n * Dragging\n */\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_CHILD_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> = new WeakMap()\nexport const IS_DRAGGING_ELEMENT_RANGE: WeakMap<Editor, Range> = new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<Editor, 'top' | 'bottom'> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> = new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<Range, EditorSelection>()\n","/**\n * Debounce time for flushing local patches (ms since user haven't produced a patch)\n * (lower time for tests to speed them up)\n */\nexport const FLUSH_PATCHES_DEBOUNCE_MS = process.env.NODE_ENV === 'test' ? 50 : 1000\n","import {createContext, useContext} from 'react'\n\nimport {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const PortableTextEditorContext = createContext<PortableTextEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const usePortableTextEditor = () => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n\n  return editor\n}\n","import {createContext, useContext} from 'react'\nimport {EditorSelection} from '../../types/editor'\n\n/**\n * A React context for sharing the editor selection.\n */\n\nexport const PortableTextEditorSelectionContext = createContext<EditorSelection | null>(null)\n\n/**\n * Get the current editor selection from the React context.\n */\n\nexport const usePortableTextEditorSelection = () => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return selection\n}\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\n\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\n\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`\n    )\n  }\n  return readOnly\n}\n","import {createContext, useContext} from 'react'\nimport {PortableTextBlock} from '../../types/portableText'\n\n/**\n * A React context for sharing the editor value.\n */\n\nexport const PortableTextEditorValueContext = createContext<PortableTextBlock[] | undefined>(\n  undefined\n)\n\n/**\n * Get the current editor value from the React context.\n */\n\nexport const usePortableTextEditorValue = () => {\n  return useContext(PortableTextEditorValueContext)\n}\n","import {Path} from '@sanity/types'\nimport {omitBy, isUndefined, get} from 'lodash'\nimport {\n  Editor,\n  MoveNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  InsertNodeOperation,\n  SplitNodeOperation,\n  RemoveNodeOperation,\n  MergeNodeOperation,\n  Text,\n  Descendant,\n} from 'slate'\nimport {set, insert, unset, diffMatchPatch, setIfMissing} from '../patch/PatchEvent'\nimport {PortableTextFeatures, PortableTextBlock, TextSpan} from '../types/portableText'\nimport type {Patch, InsertPosition} from '../types/patch'\nimport {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport {fromSlateValue} from './values'\nimport {debugWithName} from './debug'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  portableTextFeatures: PortableTextFeatures\n): PatchFunctions {\n  const textBlockName = portableTextFeatures.types.block.name\n  function insertTextPatch(\n    editor: Editor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    debug('Operation', JSON.stringify(operation, null, 2))\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      Text.isText(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as TextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = Text.isText(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: Editor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[]\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      Text.isText(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as TextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [{_key: block._key}, 'children', {_key: textChild._key}, 'text']\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = Text.isText(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(editor: Editor, operation: SetNodeOperation) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined\n      )\n      return [set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}])]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          Object.keys(operation.newProperties).forEach((keyName) => {\n            const val = get(operation.newProperties, keyName)\n            patches.push(set(val, [{_key: blockKey}, 'children', {_key: childKey}, keyName]))\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function insertNodePatch(\n    editor: Editor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[]\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert([fromSlateValue([operation.node], textBlockName)[0]], position, [\n            {_key: targetKey},\n          ]),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert([fromSlateValue([operation.node], textBlockName)[0]], 'before', [operation.path[0]]),\n      ]\n    } else if (operation.path.length === 2 && editor.children[operation.path[0]]) {\n      if (!editor.isTextBlock(block)) {\n        throw new Error('Invalid block')\n      }\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1] ? 'before' : 'after'\n      const child = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [operation.node as Descendant],\n          },\n        ],\n        textBlockName\n      )[0].children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    throw new Error(\n      `Unexpected path encountered: ${JSON.stringify(operation.path)} - ${JSON.stringify(\n        beforeValue\n      )}`\n    )\n  }\n\n  function splitNodePatch(\n    editor: Editor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[]\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0]\n        )} is not a text block and can't be split`\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName\n        )[0]\n        if (targetValue) {\n          patches.push(insert([targetValue], 'after', [{_key: splitBlock._key}]))\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (Text.isText(splitSpan)) {\n        const targetSpans = fromSlateValue(\n          [\n            {\n              ...splitBlock,\n              children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2),\n            },\n          ],\n          textBlockName\n        )[0].children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ])\n        )\n        patches.push(\n          set(splitSpan.text, [{_key: splitBlock._key}, 'children', {_key: splitSpan._key}, 'text'])\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    _: Editor,\n    operation: RemoveNodeOperation,\n    beforeValue: PortableTextBlock[]\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (operation.path.length === 2) {\n      const spanToRemove = block && block.children && block.children[operation.path[1]]\n      if (spanToRemove) {\n        return [unset([{_key: block._key}, 'children', {_key: spanToRemove._key}])]\n      }\n      // If it was not there before, do nothing\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n  }\n\n  function mergeNodePatch(\n    editor: Editor,\n    operation: MergeNodeOperation,\n    beforeValue: PortableTextBlock[]\n  ) {\n    const patches: Patch[] = []\n    if (operation.path.length === 1) {\n      const block = beforeValue[operation.path[0]]\n      const targetKey = block && block._key\n      if (targetKey) {\n        const newBlock = fromSlateValue([editor.children[operation.path[0] - 1]], textBlockName)[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: targetKey}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (operation.path.length === 2) {\n      const block = beforeValue[operation.path[0]]\n      const mergedSpan = block.children[operation.path[1]]\n      const targetBlock = editor.children[operation.path[0]]\n      if (!editor.isTextBlock(targetBlock)) {\n        throw new Error('Invalid block')\n      }\n      const targetSpan = targetBlock.children[operation.path[1] - 1]\n      if (Text.isText(targetSpan)) {\n        // Set the merged span with it's new value\n        patches.push(\n          set(targetSpan.text, [{_key: block._key}, 'children', {_key: targetSpan._key}, 'text'])\n        )\n        patches.push(unset([{_key: block._key}, 'children', {_key: mergedSpan._key}]))\n      }\n    } else {\n      throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`)\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    _: Editor,\n    operation: MoveNodeOperation,\n    beforeValue: PortableTextBlock[]\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition = operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [{_key: targetBlock._key}])\n      )\n    } else if (operation.path.length === 2) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position = operation.newPath[1] === targetBlock.children.length ? 'after' : 'before'\n      const childToInsert = fromSlateValue([block], textBlockName)[0].children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ])\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, Point, Path as SlatePath, Element, Node} from 'slate'\nimport {isKeySegment, Path} from '@sanity/types'\nimport {EditorSelectionPoint} from '../types/editor'\nimport {PortableTextBlock, PortableTextFeatures} from '../types/portableText'\n\nexport function createKeyedPath(\n  point: Point,\n  value: PortableTextBlock[] | undefined,\n  portableTextFeatures: PortableTextFeatures\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== portableTextFeatures.types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath\n  const childPath = point.path.slice(0, 2)\n  const child = block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath) as Path\n}\n\nexport function createArrayedPath(point: EditorSelectionPoint, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) => isKeySegment(point.path[0]) && n._key === point.path[0]._key,\n    })\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return blockPath\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) => isEqual([{_key: child._key}], childPath))\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {BaseRange, Editor, Range} from 'slate'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {PortableTextBlock, PortableTextFeatures} from '../types/portableText'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport function toPortableTextRange(\n  value: PortableTextBlock[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  portableTextFeatures: PortableTextFeatures\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, portableTextFeatures)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, portableTextFeatures)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  return anchor && focus ? {anchor, focus} : null\n}\n\nexport function toSlateRange(selection: EditorSelection, editor: Editor): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n","import {Text, Range, Transforms, Editor, Element as SlateElement, Node} from 'slate'\nimport {Path} from '@sanity/types'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {DOMNode} from '@sanity/slate-react/dist/utils/dom'\nimport {Type} from '../../types/schema'\nimport {PortableTextBlock, PortableTextChild, PortableTextFeatures} from '../../types/portableText'\nimport {\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {toSlateValue, fromSlateValue} from '../../utils/values'\nimport {toSlateRange, toPortableTextRange} from '../../utils/ranges'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  portableTextEditor: PortableTextEditor,\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n) {\n  return function withEditableAPI(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        // Make a selection if missing\n        if (!editor.selection) {\n          const point = {path: [0, 0], offset: 0}\n          Transforms.select(editor, {focus: point, anchor: point})\n          editor.onChange()\n        }\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          // Try/catch this, as Slate may error because the selection is currently wrong\n          // TODO: catch only relevant error from Slate\n          try {\n            const [block] = Array.from(\n              Editor.nodes(editor, {\n                at: editor.selection.focus,\n                match: (n) => Editor.isBlock(editor, n),\n              })\n            )[0] || [undefined]\n            if (block) {\n              return fromSlateValue(\n                [block],\n                portableTextFeatures.types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          try {\n            const [node] = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: editor.selection.focus,\n                match: (n) => n._type !== undefined,\n                voids: true,\n              })\n            )[0] || [undefined]\n            if (node && !Editor.isBlock(editor, node)) {\n              const pseudoBlock: PortableTextBlock = {\n                _key: 'pseudo',\n                _type: portableTextFeatures.types.block.name,\n                children: [node],\n              }\n              return fromSlateValue(\n                [pseudoBlock],\n                portableTextFeatures.types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )[0].children[0]\n            }\n          } catch (err) {\n            return undefined\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: Type, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus,\n            match: (n) => Editor.isBlock(editor, n),\n          })\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focus block')\n        }\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          throw new Error(\"Can't insert childs into block objects\")\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: portableTextFeatures.types.block.name,\n              children: [\n                {\n                  _key: keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        Editor.insertNode(editor, child as Node)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n            editor.selection,\n            portableTextFeatures\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: Type, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor\n        )[0] as unknown as Node\n        Editor.insertNode(editor, block)\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n            editor.selection,\n            portableTextFeatures\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch (err) {\n          // This is fine.\n          // debug(err)\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![\n          portableTextFeatures.types.block.name,\n          portableTextFeatures.types.span.name,\n        ].includes(element._type)\n      },\n      findByPath: (\n        path: Path\n      ): [PortableTextBlock | PortableTextChild | undefined, Path | undefined] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(editor, slatePath.focus.path.slice(0, 1))\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [\n                fromSlateValue([block], portableTextFeatures.types.block.name)[0],\n                [{_key: block._key}],\n              ]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            )[0]\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [ptChild, [{_key: block._key}, 'children', {_key: ptChild._key}]]\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (element: PortableTextBlock | PortableTextChild): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || []\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch (err) {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextBlock[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextBlock[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch (err) {\n          return []\n        }\n      },\n      addAnnotation: (\n        type: Type,\n        value?: {[prop: string]: PortableTextBlock}\n      ): {spanPath: Path; markDefPath: Path} | undefined => {\n        const {selection} = editor\n        if (selection) {\n          const [block] = Editor.node(editor, selection.focus, {depth: 1})\n          if (\n            SlateElement.isElement(block) &&\n            block._type === portableTextFeatures.types.block.name\n          ) {\n            const annotationKey = keyGenerator()\n            if (editor.isTextBlock(block)) {\n              Transforms.setNodes(\n                editor,\n                {\n                  markDefs: [...block.markDefs, {_type: type.name, _key: annotationKey, ...value}],\n                },\n                {at: selection.focus}\n              )\n              editor.onChange()\n              if (Range.isCollapsed(selection)) {\n                editor.pteExpandToWord()\n                editor.onChange()\n              }\n              const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n              if (editor.selection) {\n                Editor.withoutNormalizing(editor, () => {\n                  // Split if needed\n                  Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n                  if (editor.selection && Text.isText(textNode)) {\n                    Transforms.setNodes(\n                      editor,\n                      {\n                        marks: [...((textNode.marks || []) as string[]), annotationKey],\n                      },\n                      {\n                        at: editor.selection,\n                        match: (n) => n._type === portableTextFeatures.types.span.name,\n                      }\n                    )\n                    editor.onChange()\n                  }\n                })\n                Editor.normalize(editor)\n                editor.onChange()\n                const newSelection = toPortableTextRange(\n                  fromSlateValue(\n                    editor.children,\n                    portableTextFeatures.types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  ),\n                  editor.selection,\n                  portableTextFeatures\n                )\n                // eslint-disable-next-line max-depth\n                if (newSelection && typeof block._key === 'string') {\n                  // Insert an empty string to continue writing non-annotated text\n                  Editor.withoutNormalizing(editor, () => {\n                    if (editor.selection) {\n                      Transforms.insertNodes(\n                        editor,\n                        [{_type: 'span', text: '', marks: [], _key: keyGenerator()}],\n                        {\n                          at: Range.end(editor.selection),\n                        }\n                      )\n                      editor.onChange()\n                    }\n                  })\n                  return {\n                    spanPath: newSelection.focus.path,\n                    markDefPath: [{_key: block._key}, 'markDefs', {_key: annotationKey}],\n                  }\n                }\n              }\n            }\n          }\n        }\n        return undefined\n      },\n      delete: (selection: EditorSelection, options?: EditableAPIDeleteOptions): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            const nodes = Editor.nodes(editor, {\n              at: range,\n              match: (node) => {\n                if (options?.mode === 'blocks') {\n                  debug(`Deleting blocks touched by selection`)\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                }\n                debug(`Deleting children touched by selection`)\n                return (\n                  node._type === portableTextFeatures.types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n            const nodeAndPaths = [...nodes]\n            nodeAndPaths.forEach(([, p]) => {\n              Transforms.removeNodes(editor, {\n                at: p,\n                voids: true,\n                hanging: true,\n              })\n            })\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: Type): void => {\n        let {selection} = editor\n        debug('Removing annotation', type)\n        if (selection) {\n          // Select the whole annotation if collapsed\n          if (Range.isCollapsed(selection)) {\n            const [node, nodePath] = Editor.node(editor, selection, {depth: 2})\n            if (Text.isText(node) && node.marks && typeof node.text === 'string') {\n              Transforms.select(editor, nodePath)\n              selection = editor.selection\n            }\n          }\n          // Do this without normalization or span references will be unstable!\n          Editor.withoutNormalizing(editor, () => {\n            if (selection && Range.isExpanded(selection)) {\n              selection = editor.selection\n              if (!selection) {\n                return\n              }\n              // Split the span first\n              Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n              editor.onChange()\n\n              // Everything in the selection which has marks\n              const spans = [\n                ...Editor.nodes(editor, {\n                  at: selection,\n                  match: (node) =>\n                    Text.isText(node) &&\n                    node.marks !== undefined &&\n                    Array.isArray(node.marks) &&\n                    node.marks.length > 0,\n                }),\n              ]\n              spans.forEach(([span, path]) => {\n                const [block] = Editor.node(editor, path, {depth: 1})\n                if (editor.isTextBlock(block)) {\n                  block.markDefs\n                    .filter((def) => def._type === type.name)\n                    .forEach((def) => {\n                      if (\n                        Text.isText(span) &&\n                        Array.isArray(span.marks) &&\n                        span.marks.includes(def._key)\n                      ) {\n                        const newMarks = [...(span.marks || []).filter((mark) => mark !== def._key)]\n                        Transforms.setNodes(\n                          editor,\n                          {\n                            marks: newMarks,\n                          },\n                          {at: path, voids: false, split: false}\n                        )\n                      }\n                    })\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n          editor.onChange()\n        }\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n            editor.selection,\n            portableTextFeatures\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(\n          editor.children,\n          portableTextFeatures.types.block.name,\n          KEY_TO_VALUE_ELEMENT.get(editor)\n        )\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n    })\n    return editor\n  }\n}\n","import {PortableTextSlateEditor} from '../../types/editor'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks() {\n  return function withMaxBlocks(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      const rows = editor.maxBlocks || -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' || operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PRESERVE_KEYS: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withPreserveKeys(editor: Editor, fn: () => void): void {\n  const prev = isPreservingKeys(editor)\n  PRESERVE_KEYS.set(editor, true)\n  fn()\n  PRESERVE_KEYS.set(editor, !prev)\n}\n\nexport function isPreservingKeys(editor: Editor): boolean | undefined {\n  return PRESERVE_KEYS.get(editor)\n}\n","import {Element, Transforms, Node, Editor} from 'slate'\nimport {PortableTextFeatures} from '../../types/portableText'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {isPreservingKeys, PRESERVE_KEYS} from '../../utils/withPreserveKeys'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n) {\n  return function withKeys(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    PRESERVE_KEYS.set(editor, false)\n    const {apply, normalizeNode} = editor\n    editor.apply = (operation) => {\n      if (operation.type === 'split_node') {\n        operation.properties = {\n          ...operation.properties,\n          _key: keyGenerator(),\n        }\n      }\n      if (operation.type === 'insert_node') {\n        // Must be given a new key or adding/removing marks while typing gets in trouble (duped keys)!\n        const withNewKey = !isPreservingKeys(editor) || !('_key' in operation.node)\n        if (!Editor.isEditor(operation.node)) {\n          operation.node = {\n            ...operation.node,\n            ...(withNewKey ? {_key: keyGenerator()} : {}),\n          }\n        }\n      }\n      apply(operation)\n    }\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === portableTextFeatures.types.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          Transforms.setNodes(editor, {_key: keyGenerator()}, {at: path})\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            Transforms.setNodes(editor, {_key: keyGenerator()}, {at: childPath})\n            return\n          }\n        }\n      }\n      // Do the original `normalizeNode` to enforce other constraints.\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","export const BEFORE = 'before'\nexport const AFTER = 'after'\n\nexport default function insert(array: any[], position: string, index: number, ...args: any[]) {\n  if (position !== BEFORE && position !== AFTER) {\n    throw new Error(`Invalid position \"${position}\", must be either ${BEFORE} or ${AFTER}`)\n  }\n\n  const items = flatten(...args)\n\n  if (array.length === 0) {\n    return items\n  }\n\n  const len = array.length\n  const idx = Math.abs((len + index) % len) % len\n\n  const normalizedIdx = position === 'after' ? idx + 1 : idx\n\n  const copy = array.slice()\n  copy.splice(normalizedIdx, 0, ...flatten(items))\n  return copy\n}\n\nfunction flatten(...values: any[]) {\n  return values.reduce((prev, item) => prev.concat(item), [])\n}\n","import {PathSegment} from '@sanity/types'\nimport {findIndex} from 'lodash'\nimport applyPatch from './applyPatch'\nimport insert from './arrayInsert'\n\nconst hasOwn = Object.prototype.hasOwnProperty.call.bind(Object.prototype.hasOwnProperty)\n\nfunction move(arr: any[], from: number, to: any) {\n  const nextValue = arr.slice()\n  const val = nextValue[from]\n  nextValue.splice(from, 1)\n  nextValue.splice(to, 0, val)\n  return nextValue\n}\n\nfunction findTargetIndex(array: any[], pathSegment: PathSegment) {\n  if (typeof pathSegment === 'number') {\n    return pathSegment\n  }\n  const index = findIndex(array, pathSegment)\n  return index === -1 ? false : index\n}\n\nexport default function apply(\n  value: any,\n  patch: {type: any; path: any; value: any; position: any; items: any}\n) {\n  const nextValue = value.slice() // make a copy for internal mutation\n\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'setIfMissing') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return value === undefined ? patch.value : value\n    } else if (patch.type === 'set') {\n      if (!Array.isArray(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an array to a non-array')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'move') {\n      if (!patch.value || !hasOwn(patch.value, 'from') || !hasOwn(patch.value, 'to')) {\n        // eslint-disable-line max-depth\n        throw new Error(\n          `Invalid value of 'move' patch. Expected a value with \"from\" and \"to\" indexes, instead got: ${JSON.stringify(\n            patch.value\n          )}`\n        )\n      }\n      return move(nextValue, patch.value.from, patch.value.to)\n    }\n    throw new Error(`Invalid array operation: ${patch.type}`)\n  }\n\n  const [head, ...tail] = patch.path\n\n  const index = findTargetIndex(value, head)\n\n  // If the given selector could not be found, return as-is\n  if (index === false) {\n    return nextValue\n  }\n\n  if (tail.length === 0) {\n    if (patch.type === 'insert') {\n      const {position, items} = patch\n      return insert(value, position, index, items)\n    } else if (patch.type === 'unset') {\n      if (typeof index !== 'number') {\n        throw new Error(`Expected array index to be a number, instead got \"${index}\"`)\n      }\n      nextValue.splice(index, 1)\n      return nextValue\n    }\n  }\n\n  // The patch is not directed to me\n  nextValue[index] = applyPatch(nextValue[index], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","import {omit, clone, isObject} from 'lodash'\nimport applyPatch from './applyPatch'\n\nexport default function apply(value: any, patch: {type: any; path: any; value: any}) {\n  const nextValue = clone(value)\n  if (patch.path.length === 0) {\n    // its directed to me\n    if (patch.type === 'set') {\n      if (!isObject(patch.value)) {\n        // eslint-disable-line max-depth\n        throw new Error('Cannot set value of an object to a non-object')\n      }\n      return patch.value\n    } else if (patch.type === 'unset') {\n      return undefined\n    } else if (patch.type === 'setIfMissing') {\n      // console.log('IS IT missing?', value)\n      return value === undefined ? patch.value : value\n    }\n    throw new Error(`Invalid object operation: ${patch.type}`)\n  }\n\n  // The patch is not directed to me\n  const [head, ...tail] = patch.path\n  if (typeof head !== 'string') {\n    throw new Error(`Expected field name to be a string, instad got: ${head}`)\n  }\n\n  if (tail.length === 0 && patch.type === 'unset') {\n    return omit(nextValue, head)\n  }\n\n  nextValue[head] = applyPatch(nextValue[head], {\n    ...patch,\n    path: tail,\n  })\n  return nextValue\n}\n","const OPERATIONS: Record<string, any> = {\n  replace(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(_currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: any, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(_currentValue: any, _nextValue: any) {\n    return undefined\n  },\n  inc(currentValue: any, nextValue: any) {\n    return currentValue + nextValue\n  },\n  dec(currentValue: any, nextValue: any) {\n    return currentValue - nextValue\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(value: any, patch: any) {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for primitives. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on primitive values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path\n        .map((path: any) => JSON.stringify(path))\n        .join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  return OPERATIONS[patch.type](value, patch.value)\n}\n","import * as DMP from 'diff-match-patch'\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\ntype fn = (oldVal: any, newVal: any) => any\nconst OPERATIONS: Record<string, fn> = {\n  replace(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  set(currentValue: any, nextValue: any) {\n    return nextValue\n  },\n  setIfMissing(currentValue: undefined, nextValue: any) {\n    return currentValue === undefined ? nextValue : currentValue\n  },\n  unset(currentValue: any, nextValue: any) {\n    return undefined\n  },\n  diffMatchPatch(currentValue: string, nextValue: string) {\n    return dmp.patch_apply(dmp.patch_fromText(nextValue), currentValue)[0]\n  },\n}\n\nconst SUPPORTED_PATCH_TYPES = Object.keys(OPERATIONS)\n\nexport default function apply(\n  value: string,\n  patch: {type: string; path: any[]; value: any}\n): string {\n  if (!SUPPORTED_PATCH_TYPES.includes(patch.type)) {\n    throw new Error(\n      `Received patch of unsupported type: \"${JSON.stringify(\n        patch.type\n      )}\" for string. This is most likely a bug.`\n    )\n  }\n\n  if (patch.path.length > 0) {\n    throw new Error(\n      `Cannot apply deep operations on string values. Received patch with type \"${\n        patch.type\n      }\" and path \"${patch.path.join('.')} that targeted the value \"${JSON.stringify(value)}\"`\n    )\n  }\n  const func = OPERATIONS[patch.type]\n  if (func) {\n    return func(value, patch.value)\n  }\n  throw new Error('Unknown patch type')\n}\n","import {isObject, isString} from 'lodash'\nimport applyArrayPatch from './array'\nimport applyObjectPatch from './object'\nimport applyPrimitivePatch from './primitive'\nimport applyStringPatch from './string'\n\nexport function applyAll(value: any, patches: any[]) {\n  return patches.reduce(_apply, value)\n}\n\nfunction applyPatch(value: string, patch: {type: string; path: any[]; value: any}) {\n  if (Array.isArray(value)) {\n    return applyArrayPatch(value, patch as any)\n  }\n  if (isString(value)) {\n    return applyStringPatch(value, patch)\n  }\n  if (isObject(value)) {\n    return applyObjectPatch(value, patch)\n  }\n  return applyPrimitivePatch(value, patch)\n}\n\nexport default function _apply(value: string, patch: {type: string; path: any[]; value: any}) {\n  const res = applyPatch(value, patch)\n  // console.log('applyPatch(%o, %o) : %o (noop? %o)', value, patch, res, value === res)\n  return res\n}\n","/* eslint-disable max-statements */\nimport {Editor, Transforms, Element, Path as SlatePath, Descendant, Text, Node} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport {Path, KeyedSegment, PathSegment} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {Patch, InsertPatch, UnsetPatch, SetPatch, DiffMatchPatch} from '../types/patch'\nimport {PortableTextFeatures, PortableTextBlock, PortableTextChild} from '../types/portableText'\nimport {applyAll} from '../patch/applyPatch'\nimport {toSlateValue} from './values'\nimport {debugWithName} from './debug'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('operationToPatches')\n\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nexport function createPatchToOperations(\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n): (\n  editor: Editor,\n  patch: Patch,\n  patches: Patch[],\n  snapshot: PortableTextBlock[] | undefined\n) => boolean {\n  function diffMatchPatch(editor: Editor, patch: DiffMatchPatch) {\n    const blockKey = findLastKey([patch.path[0]])\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return blockKey ? node._key === blockKey : indx === patch.path[0]\n    })\n    const block = editor.children[blockIndex] as Element\n    const parsed = dmp.patch_fromText(patch.value)[0]\n    if (parsed && editor.isTextBlock(block)) {\n      const childKey = findLastKey([patch.path[2]])\n      const childIndex = block.children.findIndex((node, indx) => {\n        return childKey ? node._key === childKey : indx === patch.path[0]\n      })\n      const slatePath = [blockIndex, childIndex]\n      const distance = parsed.length2 - parsed.length1\n      const point = {\n        path: slatePath,\n        offset:\n          distance >= 0\n            ? (parsed.start1 || 0) + parsed.diffs[0][1].length\n            : (parsed.start2 || 0) + parsed.length2 - distance,\n      }\n      debug(\n        `DiffMatchPatch (${distance < 0 ? 'remove' : 'insert'}) at ${JSON.stringify(slatePath)}}: `,\n        JSON.stringify(point, null, 2),\n        JSON.stringify(parsed, null, 2)\n      )\n      debugState(editor, 'before')\n\n      let text\n      if (parsed.diffs[1]) {\n        text = parsed.diffs[1][1]\n      } else {\n        text = parsed.diffs[0][1]\n      }\n      debug(`Text: '${text}'`)\n      if (distance >= 0) {\n        editor.apply({\n          type: 'insert_text',\n          path: point.path,\n          offset: point.offset,\n          text,\n        })\n      } else {\n        editor.apply({\n          type: 'remove_text',\n          path: point.path,\n          offset: point.offset - text.length,\n          text,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    return false\n  }\n\n  function insertPatch(editor: Editor, patch: InsertPatch) {\n    // Insert blocks\n    if (patch.path.length === 1) {\n      const {items, position} = patch\n      const blocksToInsert = toSlateValue(\n        items as PortableTextBlock[],\n        {portableTextFeatures},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      ) as Descendant[]\n      const posKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) => {\n        return posKey ? node._key === posKey : indx === patch.path[0]\n      })\n      const normalizedIdx = position === 'after' ? index + 1 : index\n      debug(`Inserting blocks at path [${normalizedIdx}]`)\n      debugState(editor, 'before')\n      Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n      debugState(editor, 'after')\n      return true\n    }\n    const {items, position} = patch\n    const posKey = findLastKey(patch.path)\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return posKey ? node._key === posKey : indx === patch.path[0]\n    })\n\n    // Insert children\n    const block: PortableTextBlock | undefined =\n      editor.children && blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex =\n      block &&\n      block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n    const childrenToInsert =\n      block &&\n      toSlateValue(\n        [{...block, children: items as PortableTextChild[]}],\n        {portableTextFeatures},\n        KEY_TO_SLATE_ELEMENT.get(editor)\n      )\n\n    const normalizedIdx = position === 'after' ? childIndex + 1 : childIndex\n    const targetPath = [blockIndex, normalizedIdx]\n    debug(`Inserting children at path ${targetPath}`)\n    debugState(editor, 'before')\n    if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n      Transforms.insertNodes(editor, childrenToInsert[0].children, {at: targetPath})\n    }\n    debugState(editor, 'after')\n    return true\n  }\n\n  function setPatch(editor: Editor, patch: SetPatch) {\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n    debug('blockIndex', blockIndex)\n    const block: PortableTextBlock | undefined =\n      blockIndex > -1 ? editor.children[blockIndex] : undefined\n    const childIndex =\n      block &&\n      block.children.findIndex((node: PortableTextChild, indx: number) => {\n        return isKeyedSegment(patch.path[2])\n          ? node._key === patch.path[2]._key\n          : indx === patch.path[2]\n      })\n    let value = patch.value\n    const targetPath: SlatePath = childIndex > -1 ? [blockIndex, childIndex] : [blockIndex]\n    if (typeof patch.path[3] === 'string') {\n      value = {}\n      value[patch.path[3]] = patch.value\n    }\n    const isTextBlock = portableTextFeatures.types.block.name === block?._type\n    if (isTextBlock) {\n      debug(`Setting nodes at ${JSON.stringify(patch.path)} - ${JSON.stringify(targetPath)}`)\n      debug('Value to set', JSON.stringify(value, null, 2))\n      debugState(editor, 'before')\n      if (targetPath.length === 1) {\n        debug('Setting block property')\n        const {children, ...nextRest} = value as PortableTextBlock\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {children: prevChildren, ...prevRest} = block || {children: undefined}\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {...prevRest},\n          newProperties: nextRest,\n        })\n        if (block && Element.isElement(block)) {\n          block.children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'remove_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n        if (Array.isArray(children)) {\n          children.forEach((c, cIndex) => {\n            editor.apply({\n              type: 'insert_node',\n              path: targetPath.concat(cIndex),\n              node: c,\n            })\n          })\n        }\n      } else if (Text.isText(value)) {\n        debug('Setting text property')\n        const prevSel = editor.selection && {...editor.selection}\n        editor.apply({\n          type: 'remove_text',\n          path: targetPath,\n          offset: 0,\n          text: block?.children[childIndex].text,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: targetPath,\n          offset: 0,\n          text: value.text,\n        })\n        const onSamePath = prevSel && isEqual(prevSel.focus.path, targetPath)\n        // const onSameText =\n        //   editor.selection &&\n        //   editor.selection.focus.path[0] === blockIndex &&\n        //   patch.path[3] === 'text'\n        if (onSamePath) {\n          debug('On same path, restoring previous selection')\n          Transforms.select(editor, prevSel)\n        }\n        //  else if (onSameText) {\n        //   debug('Adjusting for inserted text')\n        //   const newOffset = typeof patch.value === 'string' ? patch.value.length : 0\n        //   const point = {path: targetPath, offset: newOffset}\n        //   Transforms.select(editor, {focus: point, anchor: point})\n        // }\n      } else {\n        debug('Setting non-text property')\n        editor.apply({\n          type: 'set_node',\n          path: targetPath,\n          properties: {},\n          newProperties: value as Partial<Node>,\n        })\n      }\n      debugState(editor, 'after')\n      return true\n    }\n    // If this is a object block, just set the whole block\n    else if (!isTextBlock && block) {\n      const newVal = applyAll([block.value], [patch])[0]\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  function unsetPatch(editor: Editor, patch: UnsetPatch, previousPatch?: Patch) {\n    // Value\n    if (patch.path.length === 0) {\n      debug(`Removing everything`)\n      debugState(editor, 'before')\n      Transforms.deselect(editor)\n      editor.children.forEach((c, i) => {\n        Transforms.removeNodes(editor, {at: [i]})\n      })\n      debugState(editor, 'after')\n      return true\n    }\n    // Single blocks\n    if (patch.path.length === 1) {\n      const lastKey = findLastKey(patch.path)\n      const index = editor.children.findIndex((node, indx) =>\n        lastKey ? node._key === lastKey : indx === patch.path[0]\n      )\n      debug(`Removing block at path [${index}]`)\n      debugState(editor, 'before')\n      if (\n        editor.selection &&\n        editor.selection.focus.path[0] === index &&\n        editor.children[index - 1]\n      ) {\n        const point = {path: [Math.max(editor.selection.focus.path[0] - 1, 0)], offset: 0}\n        Transforms.select(editor, {focus: point, anchor: point})\n        Transforms.move(editor, {unit: 'line'})\n      }\n      Transforms.removeNodes(editor, {at: [index]})\n      debugState(editor, 'after')\n      return true\n    }\n\n    const blockIndex = editor.children.findIndex((node, indx) => {\n      return isKeyedSegment(patch.path[0])\n        ? node._key === patch.path[0]._key\n        : indx === patch.path[0]\n    })\n\n    const block: PortableTextBlock | undefined =\n      blockIndex > -1 ? editor.children[blockIndex] : undefined\n\n    const isTextBlock = portableTextFeatures.types.block.name === block?._type\n\n    // Unset on text block children\n    if (isTextBlock && patch.path[1] === 'children' && patch.path.length === 3) {\n      const childIndex =\n        block &&\n        block.children.findIndex((node: PortableTextChild, indx: number) => {\n          return isKeyedSegment(patch.path[2])\n            ? node._key === patch.path[2]._key\n            : indx === patch.path[2]\n        })\n      const targetPath = [blockIndex, childIndex]\n      const prevSel = editor.selection && {...editor.selection}\n      const onSamePath = isEqual(editor.selection?.focus.path, targetPath)\n\n      debug(`Removing child at path ${JSON.stringify(targetPath)}`)\n      debugState(editor, 'before')\n      if (prevSel && onSamePath && editor.isTextBlock(block)) {\n        const needToAdjust = childIndex >= prevSel.focus.path[1]\n        if (needToAdjust) {\n          const isMergeUnset =\n            previousPatch?.type === 'set' &&\n            previousPatch.path[3] === 'text' &&\n            typeof previousPatch.value === 'string' &&\n            isEqual(\n              previousPatch.value.slice(-block.children[childIndex].text.length),\n              block.children[childIndex].text\n            )\n          if (isMergeUnset) {\n            debug('Adjusting selection for merging of nodes')\n            prevSel.focus = {...prevSel.focus}\n            prevSel.focus.path = [targetPath[0], Math.max(targetPath[1] - 1, 0)]\n            prevSel.focus.offset =\n              block.children[Math.max(childIndex - 1, 0)].text.length -\n              block.children[childIndex].text.length +\n              prevSel.focus.offset\n            prevSel.anchor = prevSel.focus\n            Transforms.select(editor, prevSel)\n            Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n            debugState(editor, 'after')\n            return true\n          }\n        }\n      }\n      Transforms.removeNodes(editor, {at: [blockIndex, childIndex]})\n      debugState(editor, 'after')\n      return true\n    }\n    // Inside block objects - patch block and set it again\n    if (!isTextBlock && block) {\n      const newBlock = applyAll([block], [patch])[0]\n      Transforms.setNodes(editor, newBlock, {at: [blockIndex]})\n      return true\n    }\n    return false\n  }\n\n  let previousPatch: Patch | undefined\n\n  return function (editor: Editor, patch: Patch): boolean {\n    let changed = false\n    debug('\\n\\nNEW PATCH =============================================================')\n    debug(JSON.stringify(patch, null, 2))\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch, previousPatch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n    previousPatch = patch\n    return changed\n  }\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\n// Helper function to find the last part of a patch path that has a known key\nfunction findLastKey(path: Path) {\n  let key: string | null = null\n\n  path\n    .concat('')\n    .reverse()\n    .forEach((part) => {\n      if (isKeyedSegment(part)) {\n        key = part._key\n      }\n    })\n\n  return key\n}\n\nfunction debugState(editor: Editor, stateName: string) {\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n","/* eslint-disable complexity */\n/* eslint-disable no-eq-null */\n/* eslint-disable max-depth */\n/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport {isEqual, flatten} from 'lodash'\nimport {\n  Editor,\n  Element as SlateElement,\n  Operation,\n  Path,\n  SplitNodeOperation,\n  InsertTextOperation,\n  RemoveTextOperation,\n  SelectionOperation,\n} from 'slate'\nimport * as DMP from 'diff-match-patch'\nimport type {Patch} from '../../types/patch'\nimport {PatchObservable, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {isPatching} from '../../utils/withoutPatching'\n\nconst debug = debugWithName('plugin:withUndoRedo')\n// eslint-disable-next-line new-cap\nconst dmp = new DMP.diff_match_patch()\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst MERGING = new WeakMap<Editor, boolean | undefined>()\nconst UNDO_STEP_LIMIT = 300\n\nconst isMerging = (editor: Editor): boolean | undefined => {\n  return MERGING.get(editor)\n}\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  if (!isPatching(editor)) {\n    return false\n  }\n  return SAVING.get(editor)\n}\n\nexport function createWithUndoRedo(\n  incomingPatches$?: PatchObservable\n): [editor: (editor: PortableTextSlateEditor) => PortableTextSlateEditor, cleanupFn: () => void] {\n  // TODO: unsubscribe to this\n  // Subscribe to incoming patches\n  let cleanupFn: () => void = () => undefined\n  const incomingPatches: {patch: Patch; time: Date}[] = []\n  if (incomingPatches$) {\n    debug('Subscribing to patches')\n    const sub = incomingPatches$.subscribe(({patches}) => {\n      patches.forEach((patch) => {\n        if (patch.origin !== 'local') {\n          incomingPatches.push({patch: patch, time: new Date()})\n        }\n      })\n    })\n    cleanupFn = () => {\n      debug('Unsubscribing to patches')\n      sub.unsubscribe()\n    }\n  }\n\n  return [\n    (editor: PortableTextSlateEditor) => {\n      editor.history = {undos: [], redos: []}\n      const {apply} = editor\n      // Apply function for merging and saving local history inspired from 'slate-history' by Ian Storm Taylor\n      editor.apply = (op: Operation) => {\n        if (editor.readOnly) {\n          apply(op)\n          return\n        }\n        const {operations, history} = editor\n        const {undos} = history\n        const step = undos[undos.length - 1]\n        const lastOp = step && step.operations && step.operations[step.operations.length - 1]\n        const overwrite = shouldOverwrite(op, lastOp)\n        let save = isSaving(editor)\n        let merge = isMerging(editor)\n\n        if (save == null) {\n          save = shouldSave(op, lastOp)\n        }\n\n        if (save) {\n          if (merge == null) {\n            if (step == null) {\n              merge = false\n              // eslint-disable-next-line no-negated-condition\n            } else if (operations.length !== 0) {\n              merge = true\n            } else {\n              merge = shouldMerge(op, lastOp) || overwrite\n            }\n          }\n\n          if (step && merge) {\n            if (overwrite) {\n              step.operations.pop()\n            }\n            step.operations.push(op)\n          } else {\n            const stp = {\n              operations: [\n                ...(editor.selection === null ? [] : [createSelectOperation(editor)]),\n                op,\n              ],\n              timestamp: new Date(),\n            }\n            undos.push(stp)\n            debug('Created new undo step', step)\n          }\n\n          while (undos.length > UNDO_STEP_LIMIT) {\n            undos.shift()\n          }\n\n          if (shouldClear(op)) {\n            history.redos = []\n          }\n        }\n        apply(op)\n      }\n\n      editor.undo = () => {\n        if (editor.readOnly) {\n          return\n        }\n        const {undos} = editor.history\n        if (undos.length > 0) {\n          const step = undos[undos.length - 1]\n          debug('Undoing', step)\n          if (step.operations.length > 0) {\n            const otherPatches = [...incomingPatches.filter((item) => item.time >= step.timestamp)]\n            let transformedOperations = step.operations\n            otherPatches.forEach((item) => {\n              transformedOperations = flatten(\n                transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n              )\n            })\n            withoutSaving(editor, () => {\n              Editor.withoutNormalizing(editor, () => {\n                transformedOperations\n                  .map(Operation.inverse)\n                  .reverse()\n                  .forEach((op) => {\n                    // Try this as the document could be changed from the outside,\n                    // and sometimes we can't perform the undo operation on the current doc.\n                    try {\n                      editor.apply(op)\n                    } catch (err) {\n                      debug('Could not perform undo step', err)\n                      editor.history.redos.push(step)\n                      editor.history.undos.pop()\n                    }\n                  })\n              })\n            })\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n          editor.onChange()\n        }\n      }\n\n      editor.redo = () => {\n        if (editor.readOnly) {\n          return\n        }\n        const {redos} = editor.history\n        if (redos.length > 0) {\n          const step = redos[redos.length - 1]\n          debug('Redoing', step)\n          if (step.operations.length > 0) {\n            const otherPatches = incomingPatches.filter((item) => item.time > step.timestamp)\n            let transformedOperations = step.operations\n            otherPatches.forEach((item) => {\n              transformedOperations = flatten(\n                transformedOperations.map((op) => transformOperation(editor, item.patch, op))\n              )\n            })\n            withoutSaving(editor, () => {\n              Editor.withoutNormalizing(editor, () => {\n                transformedOperations.forEach((op) => {\n                  try {\n                    editor.apply(op)\n                  } catch (err) {\n                    debug('Could not perform redo step', err)\n                    editor.history.undos.push(step)\n                    editor.history.redos.pop()\n                  }\n                })\n              })\n            })\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n          editor.onChange()\n        }\n      }\n\n      // Plugin return\n      return editor\n    },\n    cleanupFn,\n  ]\n}\n\n// This will adjust the user selection according to patcehes done by others.\n// TODO: complete all necessary steps of the algorithm and write tests.\n\n// eslint-disable-next-line max-statements\nfunction transformOperation(editor: Editor, patch: Patch, operation: Operation): Operation[] {\n  // debug(`Rebasing selection for patch ${patch.type} against operation ${operation.type}`)\n\n  let transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, patch.items.length)]\n  }\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    return [adjustBlockPath(editor, patch, operation, -1)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(`Adjusting selection for unset everything patch and ${operation.type} operation`)\n    return [operation]\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const blockIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n    const block = editor.children[blockIndex]\n    if (SlateElement.isElement(block) && Array.isArray(block.children)) {\n      const childIndex = block.children.findIndex((child) =>\n        isEqual({_key: child._key}, patch.path[2])\n      )\n      const parsed = dmp.patch_fromText(patch.value)[0]\n      if (!parsed) {\n        debug('Could not parse diffMatchPatch', patch)\n        return [operation]\n      }\n      const distance = parsed.length2 - parsed.length1\n      const patchIsRemovingText = parsed.diffs.some((diff) => diff[0] === -1)\n\n      if (operation.type === 'split_node' && operation.path.length > 1) {\n        const splitOperation = transformedOperation as SplitNodeOperation\n        if (patchIsRemovingText) {\n          splitOperation.position -= distance\n        } else {\n          splitOperation.position += distance\n        }\n        return [splitOperation]\n      }\n\n      if (\n        (operation.type === 'insert_text' || operation.type === 'remove_text') &&\n        Path.isPath(operation.path) &&\n        operation.path[0] !== undefined &&\n        operation.path[0] === blockIndex &&\n        operation.path[1] === childIndex\n      ) {\n        if (operation.type === 'insert_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === 1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const insertTextOperation = transformedOperation as InsertTextOperation\n            insertTextOperation.offset += distance\n            transformedOperation = insertTextOperation\n          }\n          // TODO: deal with overlapping ranges\n          return [transformedOperation]\n        }\n\n        if (operation.type === 'remove_text') {\n          let insertOffset = 0\n          for (const diff of parsed.diffs) {\n            if (diff[0] === 0) {\n              insertOffset = diff[1].length\n            }\n            if (diff[0] === -1) {\n              break\n            }\n          }\n          if (parsed.start1 !== null && insertOffset + parsed.start1 <= operation.offset) {\n            const removeTextOperation = transformedOperation as RemoveTextOperation\n            removeTextOperation.offset -= distance\n            transformedOperation = removeTextOperation\n          }\n          return [transformedOperation]\n        }\n      }\n      // // Selection operations with diffPatchMatch\n      // if (operation.type === 'set_selection') {\n      //   const newProperties = transformedOperation.newProperties\n      //   if (newProperties && patchIsRemovingText) {\n      //     newProperties.offset = newProperties.offset - distance\n      //   } else if (newProperties) {\n      //     newProperties.offset = newProperties.offset + distance\n      //   }\n      //   return [newProperties ? {...transformedOperation, newProperties} : transformedOperation]\n      // }\n    }\n    // TODO: transform this?\n    // if (operation.type === 'set_selection' && patch.type !== 'diffMatchPatch') {\n    //   console.log('set_selection other', JSON.stringify(patch))\n    // }\n  }\n  return [operation]\n}\n\nfunction adjustBlockPath(\n  editor: Editor,\n  patch: Patch,\n  operation: Operation,\n  level: number\n): Operation {\n  const myIndex = editor.children.findIndex((blk) => isEqual({_key: blk._key}, patch.path[0]))\n  if (\n    myIndex >= 0 &&\n    operation.type !== 'set_selection' &&\n    Array.isArray(operation.path) &&\n    operation.path[0] !== undefined &&\n    operation.path[0] >= myIndex + level\n  ) {\n    const transformedOperation = {...operation}\n    const newPath = [operation.path[0] + level, ...operation.path.slice(1)]\n    debug(`Adjusting ${operation.type} for block ${patch.type}`, operation.path, newPath)\n    transformedOperation.path = newPath\n    return transformedOperation\n  }\n  return operation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties === null) {\n    return false\n  }\n\n  return true\n}\n\nconst shouldOverwrite = (op: Operation, prev: Operation | undefined): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n","/* eslint-disable max-nested-callbacks */\nimport {Observable, Subject, Subscription} from 'rxjs'\nimport {\n  Descendant,\n  Editor,\n  InsertNodeOperation,\n  InsertTextOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  RemoveTextOperation,\n  SetNodeOperation,\n  SplitNodeOperation,\n} from 'slate'\nimport {debounce} from 'lodash'\nimport {insert, setIfMissing, unset} from '../../patch/PatchEvent'\nimport type {Patch} from '../../types/patch'\n\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {PortableTextBlock, PortableTextFeatures} from '../../types/portableText'\nimport {EditorChange, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {PATCHING, isPatching, withoutPatching} from '../../utils/withoutPatching'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport {createPatchToOperations} from '../../utils/patchToOperations'\nimport {defaultKeyGenerator} from '../../editor/PortableTextEditor'\nimport {withPreserveKeys} from '../../utils/withPreserveKeys'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[]\n  ) => Patch[]\n}\n\ninterface Options {\n  patchFunctions: PatchFunctions\n  change$: Subject<EditorChange>\n  portableTextFeatures: PortableTextFeatures\n  syncValue: () => void\n  incomingPatches$?: Observable<{\n    patches: Patch[]\n    snapshot: PortableTextBlock[] | undefined\n  }>\n}\n\nexport function createWithPatches({\n  patchFunctions,\n  change$,\n  portableTextFeatures,\n  syncValue,\n  incomingPatches$,\n}: Options): [\n  editor: (editor: PortableTextSlateEditor) => PortableTextSlateEditor,\n  cleanupFn: () => void\n] {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const patchToOperations = createPatchToOperations(portableTextFeatures, defaultKeyGenerator)\n  let patchSubscription: Subscription\n  const cleanupFn = () => {\n    if (patchSubscription) {\n      debug('Unsubscribing to patches')\n      patchSubscription.unsubscribe()\n    }\n  }\n  return [\n    function withPatches(editor: PortableTextSlateEditor) {\n      PATCHING.set(editor, true)\n\n      previousChildren = [...editor.children]\n\n      // Sync the with props.value in PortableTextEditor after we have processed batches of incoming patches.\n      // This is only for consistency checking against the props.value, so it can be debounced without problems.\n      const syncValueAfterIncomingPatches = debounce(() => syncValue(), 100, {\n        trailing: true,\n        leading: false,\n      })\n\n      // Subscribe and deal with incoming patches\n      if (incomingPatches$) {\n        debug('Subscribing to patches')\n        patchSubscription = incomingPatches$.subscribe(({patches, snapshot}) => {\n          debug('Incoming patches', patches)\n          const remotePatches = patches.filter((p) => p.origin !== 'local')\n          if (remotePatches.length !== 0) {\n            Editor.withoutNormalizing(editor, () => {\n              remotePatches.forEach((patch) => {\n                debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                withoutPatching(editor, () => {\n                  withoutSaving(editor, () => {\n                    withPreserveKeys(editor, () => {\n                      try {\n                        patchToOperations(editor, patch, patches, snapshot)\n                      } catch (err) {\n                        debug('Got error trying to create operations from patch')\n                        console.error(err)\n                      }\n                    })\n                  })\n                })\n              })\n            })\n          }\n          if (patches.length > 0) {\n            syncValueAfterIncomingPatches()\n          }\n        })\n      }\n      const {apply} = editor\n      editor.apply = (operation: Operation): void | Editor => {\n        if (editor.readOnly) {\n          apply(operation)\n          return editor\n        }\n        let patches: Patch[] = []\n\n        // Update previous children here before we apply\n        previousChildren = editor.children\n\n        const editorWasEmpty = isEqualToEmptyEditor(previousChildren, portableTextFeatures)\n\n        // Apply the operation\n        apply(operation)\n\n        const editorIsEmpty = isEqualToEmptyEditor(editor.children, portableTextFeatures)\n\n        if (!isPatching(editor)) {\n          debug(`Editor is not producing patch for operation ${operation.type}`, operation)\n          return editor\n        }\n\n        // Make sure the actual value is an array, and then insert the placeholder block into it\n        // before we produce any other patches that will target that block.\n        if (editorWasEmpty && operation.type !== 'set_selection') {\n          patches.push(setIfMissing([], []))\n          previousChildren.forEach((c, index) => {\n            patches.push(\n              insert(fromSlateValue([c], portableTextFeatures.types.block.name), 'before', [index])\n            )\n          })\n        }\n        switch (operation.type) {\n          case 'insert_text':\n            patches = [\n              ...patches,\n              ...patchFunctions.insertTextPatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'remove_text':\n            patches = [\n              ...patches,\n              ...patchFunctions.removeTextPatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'remove_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.removeNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'split_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.splitNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'insert_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.insertNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'set_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'merge_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.mergeNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'move_node':\n            patches = [\n              ...patches,\n              ...patchFunctions.moveNodePatch(editor, operation, previousChildren),\n            ]\n            break\n          case 'set_selection':\n          default:\n          // Do nothing\n        }\n\n        // Unset the value if the operation made the editor empty\n        if (editorIsEmpty && ['remove_text', 'remove_node'].includes(operation.type)) {\n          patches = [...patches, unset([])]\n          change$.next({\n            type: 'unset',\n            previousValue: fromSlateValue(\n              previousChildren,\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n          })\n        }\n\n        // Emit all patches\n        if (patches.length > 0) {\n          patches.forEach((patch) => {\n            change$.next({\n              type: 'patch',\n              patch: {...patch, origin: 'local'},\n            })\n          })\n        }\n        return editor\n      }\n      return editor\n    },\n    cleanupFn,\n  ]\n}\n","import {Transforms, Descendant} from 'slate'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {PortableTextFeatures} from '../../types/portableText'\nimport {debugWithName} from '../../utils/debug'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\ninterface Options {\n  portableTextFeatures: PortableTextFeatures\n  keyGenerator: () => string\n}\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock({\n  portableTextFeatures,\n  keyGenerator,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.createPlaceholderBlock = (): Descendant => {\n      return {\n        _type: portableTextFeatures.types.block.name,\n        _key: keyGenerator(),\n        style: portableTextFeatures.styles[0].value,\n        markDefs: [],\n        children: [\n          {\n            _type: 'span',\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          },\n        ],\n      }\n    }\n    const {onChange} = editor\n    // Make sure there's a placeholder block present if the editor's children become empty\n    editor.onChange = () => {\n      onChange()\n      if (editor.children.length === 0) {\n        withoutPatching(editor, () => {\n          withoutSaving(editor, () => {\n            debug('Inserting placeholder block')\n            Transforms.deselect(editor)\n            Transforms.insertNodes(editor, editor.createPlaceholderBlock(), {\n              at: [0],\n            })\n            Transforms.select(editor, {\n              focus: {path: [0, 0], offset: 0},\n              anchor: {path: [0, 0], offset: 0},\n            })\n            editor.onChange()\n          })\n        })\n      }\n    }\n    return editor\n  }\n}\n","import {Subject} from 'rxjs'\nimport {Editor, Transforms, Element, Path, Text as SlateText} from 'slate'\nimport {PortableTextBlock, PortableTextFeatures} from '../../types/portableText'\nimport {EditorChange, PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  portableTextFeatures: PortableTextFeatures,\n  change$: Subject<EditorChange>\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = portableTextFeatures.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      const [, path] = nodeEntry\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            Transforms.setNodes(editor, {style: defaultStyle}, {at: [op.path[0] + 1], voids: false})\n            break\n          }\n        }\n      }\n    }\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) && node._type === portableTextFeatures.types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(editor, {...node, style: defaultStyle} as PortableTextBlock, {\n            at: path,\n          })\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as PortableTextBlock,\n            {at: path}\n          )\n        }\n      })\n      // Emit a new selection here (though it might be the same).\n      // Toolbars and similar on the outside may rely on selection changes to update themselves.\n      change$.next({\n        type: 'selection',\n        selection: toPortableTextRange(\n          fromSlateValue(editor.children, portableTextFeatures.types.block.name),\n          editor.selection,\n          portableTextFeatures\n        ),\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Transforms, Element, Text} from 'slate'\nimport {PortableTextBlock, PortableTextFeatures, TextBlock} from '../../types/portableText'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(portableTextFeatures: PortableTextFeatures) {\n  return function withPortableTextLists(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) && node._type === portableTextFeatures.types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as PortableTextBlock\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem:\n              listItemStyle ||\n              (portableTextFeatures.lists[0] && portableTextFeatures.lists[0].value),\n          } as PortableTextBlock,\n          {at: path}\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            // @todo: fix typing\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            } as any,\n            {at: path}\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug('Decrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          } else {\n            level++\n            debug('Incrementing list level', Math.min(MAX_LIST_LEVEL, Math.max(1, level)))\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path}\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isListBlock(node) && node.listItem === listStyle,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","/* eslint-disable complexity */\n/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isEqual, flatten, uniq} from 'lodash'\nimport {Editor, Range, Transforms, Text, Path, NodeEntry, Element} from 'slate'\n\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {PortableTextFeatures} from '../../types/portableText'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = portableTextFeatures.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      normalizeNode(nodeEntry)\n      if (\n        editor.operations.some((op) =>\n          [\n            'insert_node',\n            'insert_text',\n            'merge_node',\n            'remove_node',\n            'remove_text',\n            'set_node',\n          ].includes(op.type)\n        )\n      ) {\n        mergeSpans(editor)\n      }\n      const [node, path] = nodeEntry\n      const isSpan = Text.isText(node) && node._type === portableTextFeatures.types.span.name\n      const isTextBlock = editor.isTextBlock(node)\n      if (isSpan || isTextBlock) {\n        if (!isTextBlock && !Array.isArray(node.marks)) {\n          debug('Adding .marks to span node')\n          Transforms.setNodes(editor, {marks: []}, {at: path})\n          editor.onChange()\n        }\n        for (const op of editor.operations) {\n          // Make sure markDefs are copied over when merging two blocks.\n          if (\n            op.type === 'merge_node' &&\n            op.path.length === 1 &&\n            'markDefs' in op.properties &&\n            op.properties._type === portableTextFeatures.types.block.name &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] - 1 >= 0\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n            debug(`Copying markDefs over to merged block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n              const isNormalized = isEqual(newMarkDefs, targetBlock.markDefs)\n              // eslint-disable-next-line max-depth\n              if (!isNormalized) {\n                Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: targetPath, voids: false})\n                editor.onChange()\n              }\n            }\n          }\n          // Make sure markDefs are copied over to new block when splitting a block.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            Element.isElementProps(op.properties) &&\n            op.properties._type === portableTextFeatures.types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] + 1])\n            debug(`Copying markDefs over to split block`, op)\n            if (editor.isTextBlock(targetBlock)) {\n              const oldDefs = (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n              Transforms.setNodes(\n                editor,\n                {markDefs: uniq([...oldDefs, ...op.properties.markDefs])},\n                {at: targetPath, voids: false}\n              )\n              editor.onChange()\n            }\n          }\n          // Make sure marks are reset, if a block is split at the end.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 2 &&\n            op.properties._type === portableTextFeatures.types.span.name &&\n            'marks' in op.properties &&\n            Array.isArray(op.properties.marks) &&\n            op.properties.marks.length > 0 &&\n            op.path[0] + 1 < editor.children.length\n          ) {\n            const [child, childPath] = Editor.node(editor, [op.path[0] + 1, 0])\n            if (\n              Text.isText(child) &&\n              child.text === '' &&\n              Array.isArray(child.marks) &&\n              child.marks.length > 0\n            ) {\n              Transforms.setNodes(editor, {marks: []}, {at: childPath, voids: false})\n              editor.onChange()\n            }\n          }\n          // Make sure markDefs are reset, if a block is split at start.\n          if (\n            op.type === 'split_node' &&\n            op.path.length === 1 &&\n            op.properties._type === portableTextFeatures.types.block.name &&\n            'markDefs' in op.properties &&\n            Array.isArray(op.properties.markDefs) &&\n            op.properties.markDefs.length > 0\n          ) {\n            const [block, blockPath] = Editor.node(editor, [op.path[0]])\n            if (\n              editor.isTextBlock(block) &&\n              block.children.length === 1 &&\n              block.markDefs.length > 0 &&\n              Text.isText(block.children[0]) &&\n              block.children[0].text === '' &&\n              block.children[0].marks.length === 0\n            ) {\n              Transforms.setNodes(editor, {markDefs: []}, {at: blockPath})\n              editor.onChange()\n            }\n          }\n        }\n        // Empty marks if text is empty\n        if (isSpan && Array.isArray(node.marks) && node.marks.length > 0 && node.text === '') {\n          Transforms.setNodes(editor, {marks: []}, {at: path, voids: false})\n          editor.onChange()\n        }\n      }\n      // Check consistency of markDefs\n      if (\n        isTextBlock &&\n        editor.operations.some((op) =>\n          ['split_node', 'remove_node', 'remove_text', 'merge_node'].includes(op.type)\n        )\n      ) {\n        normalizeMarkDefs(editor)\n      }\n    }\n\n    // Special hook before inserting text at the end of an annotation.\n    editor.apply = (op) => {\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        if (\n          selection &&\n          Range.isCollapsed(selection) &&\n          Editor.marks(editor)?.marks?.some((mark) => !decorators.includes(mark))\n        ) {\n          const [node] = Array.from(\n            Editor.nodes(editor, {\n              mode: 'lowest',\n              at: selection.focus,\n              match: (n) => n._type === portableTextFeatures.types.span.name,\n              voids: false,\n            })\n          )[0] || [undefined]\n          if (\n            Text.isText(node) &&\n            node.text.length === selection.focus.offset &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0\n          ) {\n            apply(op)\n            Transforms.splitNodes(editor, {\n              match: Text.isText,\n              at: {...selection.focus, offset: selection.focus.offset},\n            })\n            const marksWithoutAnnotationMarks: string[] = (\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            ).filter((mark) => decorators.includes(mark))\n            Transforms.setNodes(\n              editor,\n              {marks: marksWithoutAnnotationMarks},\n              {at: Path.next(selection.focus.path)}\n            )\n            return\n          }\n        }\n      }\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          // Split if needed\n          Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n          // Use new selection\n          const splitTextNodes = [\n            ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n          ]\n          const shouldRemoveMark = flatten(\n            splitTextNodes.map((item) => item[0]).map((node) => node.marks)\n          ).includes(mark)\n          if (shouldRemoveMark) {\n            editor.removeMark(mark)\n            return\n          }\n          Editor.withoutNormalizing(editor, () => {\n            splitTextNodes.forEach(([node, path]) => {\n              const marks = [\n                ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark\n                ),\n                mark,\n              ]\n              Transforms.setNodes(\n                editor,\n                {marks},\n                {at: path, match: Text.isText, split: true, hanging: true}\n              )\n            })\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: [...existingMarks, mark],\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {at: editor.selection, match: Text.isText}),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                        (eMark: string) => eMark !== mark\n                      ),\n                    },\n                    {at: path}\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const existingMarks: string[] =\n            {\n              ...(Editor.marks(editor) || {}),\n            }.marks || []\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            marks: existingMarks.filter((eMark) => eMark !== mark),\n          }\n          editor.marks = marks as Text\n        }\n        editor.onChange()\n      }\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return false\n      }\n      let existingMarks =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      if (Range.isExpanded(editor.selection)) {\n        Array.from(Editor.nodes(editor, {match: Text.isText, at: editor.selection})).forEach(\n          (n) => {\n            const [node] = n as NodeEntry<Text>\n            existingMarks = uniq([...existingMarks, ...((node.marks as string[]) || [])])\n          }\n        )\n      }\n      return existingMarks.includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n      editor.onChange()\n    }\n    return editor\n  }\n\n  /**\n   * Normalize re-marked spans in selection\n   */\n  function mergeSpans(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      for (const [node, path] of Array.from(\n        Editor.nodes(editor, {\n          at: Editor.range(editor, [selection.anchor.path[0]], [selection.focus.path[0]]),\n        })\n      ).reverse()) {\n        const [parent] = path.length > 1 ? Editor.node(editor, Path.parent(path)) : [undefined]\n        const nextPath = [path[0], path[1] + 1]\n        if (Editor.isBlock(editor, parent)) {\n          const nextNode = parent.children[nextPath[1]]\n          if (Text.isText(node) && Text.isText(nextNode) && isEqual(nextNode.marks, node.marks)) {\n            debug('Merging spans')\n            Transforms.mergeNodes(editor, {at: nextPath, voids: true})\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Normalize markDefs\n   *\n   */\n  function normalizeMarkDefs(editor: Editor) {\n    const {selection} = editor\n    if (selection) {\n      const blocks = Editor.nodes(editor, {\n        at: selection,\n        match: (n) => n._type === portableTextFeatures.types.block.name,\n      })\n      for (const [block, path] of blocks) {\n        if (editor.isTextBlock(block)) {\n          const newMarkDefs = block.markDefs.filter((def) => {\n            return block.children.find((child) => {\n              return (\n                Text.isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)\n              )\n            })\n          })\n          if (!isEqual(newMarkDefs, block.markDefs)) {\n            debug('Removing markDef not in use')\n            Transforms.setNodes(\n              editor,\n              {\n                markDefs: newMarkDefs,\n              },\n              {at: path}\n            )\n            editor.onChange()\n          }\n        }\n      }\n    }\n  }\n}\n","import {Subject} from 'rxjs'\nimport {EditorChange, EditorSelection, PortableTextSlateEditor} from '../../types/editor'\nimport {PortableTextFeatures} from '../../types/portableText'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT, SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  change$: Subject<EditorChange>,\n  portableTextFeatures: PortableTextFeatures\n) {\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          ptRange = existing\n        } else {\n          ptRange = toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              portableTextFeatures.types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor)\n            ),\n            editor.selection,\n            portableTextFeatures\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n      }\n      debug(`Emitting selection ${JSON.stringify(ptRange || null)}`)\n      if (ptRange) {\n        change$.next({type: 'selection', selection: ptRange})\n      } else {\n        change$.next({type: 'selection', selection: null})\n      }\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {Element, Operation, InsertNodeOperation, Text as SlateText} from 'slate'\nimport {PortableTextFeatures, TextBlock, ListItem, TextSpan} from '../../types/portableText'\nimport {debugWithName} from '../../utils/debug'\nimport {PortableTextSlateEditor} from '../../types/editor'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that shema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes(portableTextFeatures: PortableTextFeatures) {\n  return function withSchemaTypes(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    editor.isTextBlock = (value: any): value is TextBlock => {\n      return (\n        !editor.isVoid(value) &&\n        'markDefs' in value &&\n        'style' in value &&\n        'children' in value &&\n        '_type' in value &&\n        portableTextFeatures.types.block.name === value._type\n      )\n    }\n    editor.isTextSpan = (value: any): value is TextSpan => {\n      return (\n        !editor.isVoid(value) &&\n        'text' in value &&\n        'marks' in value &&\n        '_type' in value &&\n        portableTextFeatures.types.span.name === value._type\n      )\n    }\n    editor.isListBlock = (value: any): value is ListItem => {\n      return Boolean(\n        editor.isTextBlock(value) &&\n          'listItem' in value &&\n          'level' in value &&\n          value.listItem &&\n          Number.isInteger(value.level)\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        portableTextFeatures.types.block.name !== element._type &&\n        (portableTextFeatures.types.blockObjects.map((obj) => obj.name).includes(element._type) ||\n          portableTextFeatures.types.inlineObjects.map((obj) => obj.name).includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = portableTextFeatures.types.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n    // Extend Slate's default normalization to add _type span to span inserted after a inline void object\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      const isInsertTextWithoutType =\n        op.type === 'insert_node' &&\n        op.path.length === 2 &&\n        SlateText.isText(op.node) &&\n        op.node._type === undefined\n      if (isInsertTextWithoutType) {\n        const insertNodeOperation = op as InsertNodeOperation\n        const newNode: SlateText = {\n          ...(insertNodeOperation.node as SlateText),\n          _type: 'span',\n        }\n        op.node = newNode\n        debug('Setting span type to child without a type', op)\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Transforms, Text, Descendant} from 'slate'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {PortableTextFeatures} from '../../types/portableText'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  portableTextFeatures: PortableTextFeatures\n  keyGenerator: () => string\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({portableTextFeatures, keyGenerator}: Options) {\n  return function withUtils(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1 ? charsBefore.length - whiteSpaceBeforeIndex : 0\n        const whiteSpaceAfterIndex = charsAfter.split('').findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1 ? whiteSpaceAfterIndex : charsAfter.length + 1)\n        if (!(newStartOffset === newEndOffset || isNaN(newStartOffset) || isNaN(newEndOffset))) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n    return editor\n  }\n}\n","/* eslint-disable max-statements */\n/* eslint-disable complexity */\nimport {Editor, Transforms, Path, Range} from 'slate'\nimport isHotkey from 'is-hotkey'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextFeatures} from '../../types/portableText'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {HotkeyOptions} from '../../types/options'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  const createEmptyBlock = () =>\n    toSlateValue(\n      [\n        {\n          _type: portableTextFeatures.types.block.name,\n          _key: keyGenerator(),\n          style: 'normal',\n          markDefs: [],\n          children: [\n            {\n              _type: 'span',\n              _key: keyGenerator(),\n              text: '',\n              marks: [],\n            },\n          ],\n        },\n      ],\n      portableTextEditor\n    )[0]\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: React.KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          // eslint-disable-next-line guard-for-in\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isBackspace = isHotkey('backspace', event.nativeEvent)\n      const isDelete = isHotkey('delete', event.nativeEvent)\n\n      // Disallow deleting void blocks by backspace from another line.\n      // Otherwise it's so easy to delete the void block above when trying to delete text on\n      // the line below or above\n      if (\n        isBackspace &&\n        editor.selection &&\n        editor.selection.focus.path[0] > 0 &&\n        Range.isCollapsed(editor.selection)\n      ) {\n        const [prevBlock, prevPath] = Editor.node(\n          editor,\n          Path.previous(editor.selection.focus.path.slice(0, 1))\n        )\n        const [focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          prevBlock &&\n          focusBlock &&\n          Editor.isVoid(editor, prevBlock) &&\n          editor.selection.focus.offset === 0\n        ) {\n          debug('Preventing deleting void block above')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, prevPath)\n          editor.onChange()\n          return\n        }\n      }\n      if (\n        isDelete &&\n        editor.selection &&\n        editor.selection.focus.offset === 0 &&\n        Range.isCollapsed(editor.selection) &&\n        editor.children[editor.selection.focus.path[0] + 1]\n      ) {\n        const [nextBlock] = Editor.node(editor, Path.next(editor.selection.focus.path.slice(0, 1)))\n        const [focusBlock, focusBlockPath] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        if (\n          nextBlock &&\n          focusBlock &&\n          !Editor.isVoid(editor, focusBlock) &&\n          Editor.isVoid(editor, nextBlock)\n        ) {\n          debug('Preventing deleting void block below')\n          event.preventDefault()\n          event.stopPropagation()\n          Transforms.removeNodes(editor, {match: (n) => n === focusBlock})\n          Transforms.select(editor, focusBlockPath)\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      if (isTab || isShiftTab) {\n        if (editor.pteIncrementBlockLevels(isShiftTab)) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        let focusBlock\n        try {\n          ;[focusBlock] = Editor.node(editor, editor.selection.focus, {depth: 1})\n        } catch (err) {\n          // Just ignore\n        }\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n\n        // Enter from another style than the first (default one)\n        if (\n          editor.isTextBlock(focusBlock) &&\n          focusBlock.style &&\n          focusBlock.style !== portableTextFeatures.styles[0].value\n        ) {\n          const [, end] = Range.edges(editor.selection)\n          const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n          if (endAtEndOfNode) {\n            Editor.insertNode(editor, createEmptyBlock())\n            event.preventDefault()\n            return\n          }\n        }\n        // Block object enter key\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Editor.insertNode(editor, createEmptyBlock())\n          event.preventDefault()\n          return\n        }\n      }\n\n      // Soft line breaks\n      if (isShiftEnter) {\n        event.preventDefault()\n        editor.insertText('\\n')\n        return\n      }\n\n      // Undo/redo\n      if (isHotkey('mod+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.undo()\n        return\n      }\n      if (isHotkey('mod+y', event.nativeEvent) || isHotkey('mod+shift+z', event.nativeEvent)) {\n        event.preventDefault()\n        editor.redo()\n      }\n    }\n    return editor\n  }\n}\n","import {Node, Element, Transforms, Editor, Descendant, Range, Text} from 'slate'\nimport {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport {ReactEditor} from '@sanity/slate-react'\nimport {PortableTextFeatures, PortableTextBlock, PortableTextChild} from '../../types/portableText'\nimport {EditorChanges, PortableTextSlateEditor} from '../../types/editor'\nimport {fromSlateValue, toSlateValue} from '../../utils/values'\nimport {validateValue} from '../../utils/validateValue'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  change$: EditorChanges,\n  portableTextFeatures: PortableTextFeatures,\n  keyGenerator: () => string\n) {\n  return function withInsertData(editor: PortableTextSlateEditor): PortableTextSlateEditor {\n    const blockTypeName = portableTextFeatures.types.block.name\n    const spanTypeName = portableTextFeatures.types.span.name\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (block._type === blockTypeName) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  portableTextFeatures.types.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            portableTextFeatures.types.blockObjects.find((t) => t.name === block._type)?.title ||\n            'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach((zw) => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      })\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment as Node[], portableTextFeatures.types.block.name)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData('application/x-portable-text-event-origin', originEvent || 'external')\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = regenerateKeys(\n            editor,\n            toSlateValue(parsed, {portableTextFeatures}),\n            keyGenerator,\n            spanTypeName\n          )\n          // Validate the result\n          const validation = validateValue(parsed, portableTextFeatures, keyGenerator)\n          // Bail out if it's not valid\n          if (!validation.valid) {\n            const errorDescription = `${validation.resolution?.description}`\n            change$.next({\n              type: 'error',\n              level: 'warning',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          mixMarkDefs(editor, slateValue)\n          editor.insertFragment(slateValue)\n          editor.onChange()\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      change$.next({type: 'loading', isLoading: true}) // This could potentially take some time\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType\n\n        if (html) {\n          portableText = htmlToBlocks(html, portableTextFeatures.types.portableText).map((block) =>\n            normalizeBlock(block, {blockTypeName})\n          )\n          fragment = toSlateValue(portableText, {portableTextFeatures})\n          insertedType = 'HTML'\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>'\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, portableTextFeatures.types.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName})\n          )\n          fragment = toSlateValue(portableText, {\n            portableTextFeatures,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(portableText, portableTextFeatures, keyGenerator)\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          change$.next({\n            type: 'error',\n            level: 'warning',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(`Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`)\n        mixMarkDefs(editor, fragment)\n        editor.insertFragment(fragment)\n        editor.onChange()\n        change$.next({type: 'loading', isLoading: false})\n        return true\n      }\n      change$.next({type: 'loading', isLoading: false})\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment) as Node[]\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\nfunction regenerateKeys(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string\n) {\n  return fragment.map((node) => {\n    const newNode: Element = {...(node as Element)}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      newNode.markDefs = newNode.markDefs.map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        if (Array.isArray(newNode.children)) {\n          newNode.children = newNode.children.map((child) =>\n            child._type === spanTypeName && Text.isText(child)\n              ? {\n                  ...child,\n                  marks:\n                    child.marks && child.marks.includes(oldKey)\n                      ? // eslint-disable-next-line max-nested-callbacks\n                        [...child.marks].filter((mark) => mark !== oldKey).concat(newKey)\n                      : child.marks,\n                }\n              : child\n          )\n        }\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()} as Element\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys\n  })\n}\n\nfunction mixMarkDefs(editor: PortableTextSlateEditor, fragment: any) {\n  if (!editor.selection) {\n    return false\n  }\n  const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {depth: 1})\n  if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n    const {markDefs} = focusBlock\n    debug('Mixing markDefs of focusBlock and fragments[0] block', markDefs, fragment[0].markDefs)\n    // As the first block will be inserted into another block (potentially), mix those markDefs\n    Transforms.setNodes(\n      editor,\n      {\n        markDefs: [...fragment[0].markDefs, ...markDefs],\n      },\n      {at: focusPath, mode: 'lowest', voids: false}\n    )\n    return true\n  }\n  return false\n}\n","import {BaseOperation, Editor, NodeEntry, Node} from 'slate'\nimport {PortableTextSlateEditor} from '../../types/editor'\nimport {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<PortableTextSlateEditor, OriginalEditorFunctions>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {portableTextEditor} = options\n  const {portableTextFeatures, keyGenerator, readOnly, change$, syncValue, incomingPatches$} =\n    portableTextEditor\n  e.maxBlocks = portableTextEditor.maxBlocks || -1\n  e.readOnly = portableTextEditor.readOnly || false\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(portableTextFeatures)\n  const withObjectKeys = createWithObjectKeys(portableTextFeatures, keyGenerator)\n  const withSchemaTypes = createWithSchemaTypes(portableTextFeatures)\n  const withEditableAPI = createWithEditableAPI(\n    portableTextEditor,\n    portableTextFeatures,\n    keyGenerator\n  )\n  const [withPatches, withPatchesCleanupFunction] = readOnly\n    ? []\n    : createWithPatches({\n        patchFunctions: operationToPatches,\n        change$,\n        portableTextFeatures,\n        syncValue,\n        incomingPatches$,\n      })\n  const withMaxBlocks = createWithMaxBlocks()\n  const withPortableTextLists = createWithPortableTextLists(portableTextFeatures)\n  const [withUndoRedo, withUndoRedoCleanupFunction] = readOnly\n    ? []\n    : createWithUndoRedo(incomingPatches$)\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    portableTextFeatures,\n    keyGenerator\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(portableTextFeatures, change$)\n\n  const withPlaceholderBlock = createWithPlaceholderBlock({\n    keyGenerator,\n    portableTextFeatures,\n  })\n\n  const withUtils = createWithUtils({keyGenerator, portableTextFeatures})\n  const withPortableTextSelections = createWithPortableTextSelections(change$, portableTextFeatures)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.onChange = originalFunctions.onChange\n    e.apply = originalFunctions.apply\n    e.normalizeNode = originalFunctions.normalizeNode\n    if (withPatchesCleanupFunction) {\n      withPatchesCleanupFunction()\n    }\n    if (withUndoRedoCleanupFunction) {\n      withUndoRedoCleanupFunction()\n    }\n  }\n  if (readOnly) {\n    return withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withUtils(\n              withPlaceholderBlock(\n                withPortableTextLists(withPortableTextSelections(withEditableAPI(e)))\n              )\n            )\n          )\n        )\n      )\n    )\n  }\n\n  // The 'if' here is only to satisfy Typscript\n  if (withUndoRedo && withPatches) {\n    // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n    return withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPortableTextLists(\n              withPlaceholderBlock(\n                withUtils(\n                  withMaxBlocks(\n                    withUndoRedo(withPatches(withPortableTextSelections(withEditableAPI(e))))\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  }\n  return e\n}\n","import React, {PropsWithChildren} from 'react'\nimport {ArraySchemaType, Path} from '@sanity/types'\nimport {Subscription, Subject, defer, of, EMPTY, Observable, OperatorFunction} from 'rxjs'\nimport {concatMap, share, switchMap, tap} from 'rxjs/operators'\nimport {randomKey} from '@sanity/util/content'\nimport {createEditor, Descendant, Transforms} from 'slate'\nimport {debounce, isEqual, throttle} from 'lodash'\nimport {Slate, withReact} from '@sanity/slate-react'\nimport {compileType} from '../utils/schema'\nimport {getPortableTextFeatures} from '../utils/getPortableTextFeatures'\nimport {PortableTextBlock, PortableTextFeatures, PortableTextChild} from '../types/portableText'\nimport {RawType, Type} from '../types/schema'\nimport type {Patch} from '../types/patch'\nimport {\n  EditorSelection,\n  EditorChange,\n  EditorChanges,\n  EditableAPI,\n  InvalidValueResolution,\n  PatchObservable,\n  PortableTextSlateEditor,\n  EditableAPIDeleteOptions,\n} from '../types/editor'\nimport {validateValue} from '../utils/validateValue'\nimport {debugWithName} from '../utils/debug'\nimport {getValueOrInitialValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {FLUSH_PATCHES_DEBOUNCE_MS} from '../constants'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionContext} from './hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorReadOnlyContext} from './hooks/usePortableTextReadOnly'\nimport {PortableTextEditorValueContext} from './hooks/usePortableTextEditorValue'\nimport {withPlugins} from './plugins'\n\nexport const defaultKeyGenerator = () => randomKey(12)\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps = PropsWithChildren<{\n  /**\n   * Function that gets called when the editor changes the value\n   */\n  onChange: (change: EditorChange) => void\n\n  /**\n   * (Compiled or raw JSON) schema type for the portable text field\n   */\n  type: ArraySchemaType<PortableTextBlock> | RawType\n\n  /**\n   * Maximum number of blocks to allow within the editor\n   */\n  maxBlocks?: number | string\n\n  /**\n   * Whether or not the editor should be in read-only mode\n   */\n  readOnly?: boolean\n\n  /**\n   * The current value of the portable text field\n   */\n  value?: PortableTextBlock[]\n\n  /**\n   * Function used to generate keys for array items (`_key`)\n   */\n  keyGenerator?: () => string\n\n  /**\n   * Observable of incoming patches - used for undo/redo operations,\n   * adjusting editor selections on concurrent editing and similar\n   */\n  incomingPatches$?: PatchObservable\n}>\n\n/**\n * @internal\n */\n\nexport interface PortableTextEditorState {\n  invalidValueResolution: InvalidValueResolution | null\n  selection: EditorSelection | null\n  initialValue: Descendant[]\n}\nexport class PortableTextEditor extends React.Component<\n  PortableTextEditorProps,\n  PortableTextEditorState\n> {\n  public change$: EditorChanges = new Subject()\n  public keyGenerator: () => string\n  public maxBlocks: number | undefined\n  public portableTextFeatures: PortableTextFeatures\n  public readOnly: boolean\n  public slateInstance: PortableTextSlateEditor\n  public type: ArraySchemaType<PortableTextBlock>\n  public incomingPatches$?: PatchObservable\n\n  private changeSubscription: Subscription\n  private editable?: EditableAPI\n  private pendingPatches: Patch[] = []\n  private returnedPatches: Patch[] = []\n  hasPendingLocalPatches: React.MutableRefObject<boolean | null>\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (!props.type) {\n      throw new Error('PortableTextEditor: missing \"type\" property')\n    }\n\n    this.hasPendingLocalPatches = React.createRef()\n    this.hasPendingLocalPatches.current = false\n\n    this.state = {\n      invalidValueResolution: null,\n      selection: null,\n      initialValue: [], // Created in the constructor\n    }\n\n    // Test if we have a compiled schema type, if not, conveniently compile it\n    this.type = props.type.hasOwnProperty('jsonType') ? props.type : compileType(props.type)\n    // Indicate that we are loading\n    this.change$.next({type: 'loading', isLoading: true})\n\n    // Get the block types feature set (lookup table)\n    this.portableTextFeatures = getPortableTextFeatures(this.type)\n\n    // Setup keyGenerator (either from props, or default)\n    this.keyGenerator = props.keyGenerator || defaultKeyGenerator\n\n    // Setup processed incoming patches stream\n    if (props.incomingPatches$) {\n      // Buffer patches until we are no longer producing local patches\n      this.incomingPatches$ = props.incomingPatches$\n        .pipe(\n          tap(({patches}: {patches: Patch[]; snapshot: PortableTextBlock[] | undefined}) => {\n            // Reset hasPendingLocalPatches when local patches are returned\n            if (patches.some((p) => p.origin === 'local')) {\n              this.hasPendingLocalPatches.current = false\n            }\n          })\n        )\n        .pipe(\n          bufferUntil(() => !this.hasPendingLocalPatches.current),\n          concatMap((incoming) => {\n            return incoming\n          }),\n          share()\n        )\n    }\n\n    // Subscribe to editor events and set state for selection and pending patches\n    this.changeSubscription = this.change$.subscribe((next: EditorChange): void => {\n      const {onChange} = this.props\n      switch (next.type) {\n        case 'patch':\n          this.pendingPatches.push(next.patch)\n          if (this.props.incomingPatches$) {\n            this.hasPendingLocalPatches.current = true\n          }\n          this.flushDebounced()\n          onChange(next)\n          break\n        case 'selection':\n          onChange(next)\n          this.setState({selection: next.selection})\n          break\n        default:\n          onChange(next)\n      }\n    })\n\n    // Set maxBlocks and readOnly\n    this.maxBlocks =\n      typeof props.maxBlocks === 'undefined'\n        ? undefined\n        : parseInt(props.maxBlocks.toString(), 10) || undefined\n    this.readOnly = Boolean(props.readOnly) || false\n    // Validate the incoming value\n    if (props.value) {\n      const validation = validateValue(props.value, this.portableTextFeatures, this.keyGenerator)\n      if (props.value && !validation.valid) {\n        this.change$.next({type: 'loading', isLoading: false})\n        this.change$.next({\n          type: 'invalidValue',\n          resolution: validation.resolution,\n          value: props.value,\n        })\n        this.state = {...this.state, invalidValueResolution: validation.resolution}\n      }\n    }\n\n    // Create the slate instance\n    this.slateInstance = withPlugins(withReact(createEditor()), {\n      portableTextEditor: this,\n    })\n\n    this.state = {\n      ...this.state,\n      initialValue: toSlateValue(\n        getValueOrInitialValue(props.value, [this.slateInstance.createPlaceholderBlock()]),\n        {portableTextFeatures: this.portableTextFeatures},\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      ),\n    }\n    KEY_TO_VALUE_ELEMENT.set(this.slateInstance, {})\n    KEY_TO_SLATE_ELEMENT.set(this.slateInstance, {})\n  }\n\n  componentWillUnmount() {\n    this.flush()\n    this.changeSubscription.unsubscribe()\n    this.slateInstance.destroy()\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Whenever readOnly toggles, recreate the editor's plugin chain\n    if (this.props.readOnly !== prevProps.readOnly) {\n      this.readOnly = Boolean(this.props.readOnly)\n      this.slateInstance = withPlugins(this.slateInstance, {\n        portableTextEditor: this,\n      })\n    }\n    // Update the maxBlocks prop\n    if (this.props.maxBlocks !== prevProps.maxBlocks) {\n      this.maxBlocks =\n        typeof this.props.maxBlocks === 'undefined'\n          ? undefined\n          : parseInt(this.props.maxBlocks.toString(), 10) || undefined\n      this.slateInstance.maxBlocks = this.maxBlocks\n    }\n    // Sync value from props, but not when we are responding to incoming patches\n    // (if this is the case, we sync the value after the incoming patches has been processed - see createWithPatches plugin)\n    if (\n      this.props.value !== prevProps.value &&\n      (!prevProps.value || this.readOnly || !this.props.incomingPatches$)\n    ) {\n      this.syncValue()\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n    this.change$.next({type: 'value', value: this.props.value || undefined})\n    this.change$.next({type: 'ready'})\n  }\n\n  render() {\n    if (this.state.invalidValueResolution) {\n      return this.state.invalidValueResolution.description\n    }\n\n    return (\n      <PortableTextEditorContext.Provider value={this}>\n        <PortableTextEditorValueContext.Provider value={this.props.value}>\n          <PortableTextEditorReadOnlyContext.Provider value={Boolean(this.props.readOnly)}>\n            <PortableTextEditorSelectionContext.Provider value={this.state.selection}>\n              <Slate onChange={NOOP} editor={this.slateInstance} value={this.state.initialValue}>\n                {this.props.children}\n              </Slate>\n            </PortableTextEditorSelectionContext.Provider>\n          </PortableTextEditorReadOnlyContext.Provider>\n        </PortableTextEditorValueContext.Provider>\n      </PortableTextEditorContext.Provider>\n    )\n  }\n\n  public syncValue: (userCallbackFn?: () => void) => void = (userCallbackFn) => {\n    const val = this.props.value\n    const callbackFn = () => {\n      debug('Updating slate instance')\n      this.slateInstance.onChange()\n      this.change$.next({type: 'value', value: val})\n      if (userCallbackFn) {\n        userCallbackFn()\n      }\n    }\n\n    if (this.hasPendingLocalPatches.current && !this.readOnly) {\n      debug('Not syncing value (has pending local patches)')\n      retrySync(() => this.syncValue(), callbackFn)\n      return\n    }\n    // If the  editor is empty and there is a new value, just set that value directly.\n    if (\n      isEqualToEmptyEditor(this.slateInstance.children, this.portableTextFeatures) &&\n      this.props.value\n    ) {\n      const oldSel = this.slateInstance.selection\n      Transforms.deselect(this.slateInstance)\n      this.slateInstance.children = toSlateValue(\n        val,\n        {\n          portableTextFeatures: this.portableTextFeatures,\n        },\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      )\n      if (oldSel) {\n        Transforms.select(this.slateInstance, oldSel)\n      }\n      debug('Setting props.value directly to empty editor')\n      callbackFn()\n      return\n    }\n    // Test for diffs between our state value and the incoming value.\n    const isEqualToValue = !(val || []).some((blk, index) => {\n      const compareBlock = toSlateValue(\n        [blk],\n        {portableTextFeatures: this.portableTextFeatures},\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      )[0]\n      if (!isEqual(compareBlock, this.slateInstance.children[index])) {\n        return true\n      }\n      return false\n    })\n    if (isEqualToValue) {\n      debug('Not syncing value (value is equal)')\n      return\n    }\n    // Value is different - validate it.\n    debug('Validating')\n    const validation = validateValue(val, this.portableTextFeatures, this.keyGenerator)\n    if (val && !validation.valid) {\n      this.change$.next({\n        type: 'invalidValue',\n        resolution: validation.resolution,\n        value: val,\n      })\n      this.setState({invalidValueResolution: validation.resolution})\n    }\n    // Set the new value\n    debug('Replacing changed nodes')\n    if (val && val.length > 0) {\n      const oldSel = this.slateInstance.selection\n      Transforms.deselect(this.slateInstance)\n      const slateValueFromProps = toSlateValue(\n        val,\n        {\n          portableTextFeatures: this.portableTextFeatures,\n        },\n        KEY_TO_SLATE_ELEMENT.get(this.slateInstance)\n      )\n      this.slateInstance.children = slateValueFromProps\n      if (oldSel) {\n        Transforms.select(this.slateInstance, oldSel)\n      }\n    }\n    callbackFn()\n  }\n\n  private flush = () => {\n    const {onChange} = this.props\n    const finalPatches = [...this.pendingPatches]\n    if (finalPatches.length > 0) {\n      debug('Flushing', finalPatches)\n      finalPatches.forEach((p) => {\n        this.returnedPatches.push(p)\n      })\n      onChange({type: 'mutation', patches: finalPatches})\n      this.pendingPatches = []\n    }\n  }\n  private flushDebounced = debounce(this.flush, FLUSH_PATCHES_DEBOUNCE_MS, {\n    leading: false,\n    trailing: true,\n  })\n\n  // Static API methods\n  static activeAnnotations = (editor: PortableTextEditor): PortableTextBlock[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: Type,\n    value?: {[prop: string]: unknown}\n  ): {spanPath: Path; markDefPath: Path} | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild\n  ) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (editor: PortableTextEditor): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getPortableTextFeatures = (editor: PortableTextEditor) => {\n    return editor.portableTextFeatures\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: Type,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: Type,\n    value?: {[prop: string]: unknown}\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static isVoid = (editor: PortableTextEditor, element: PortableTextBlock | PortableTextChild) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (editor: PortableTextEditor, selection: EditorSelection | null) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (editor: PortableTextEditor, type: Type) =>\n    editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n}\n\nconst retrySync = throttle((syncFn, callbackFn) => syncFn(callbackFn), 100)\n\nfunction bufferUntil<T>(emitWhen: (currentBuffer: T[]) => boolean): OperatorFunction<T, T[]> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      let buffer: T[] = [] // custom buffer\n      return source.pipe(\n        tap((v) => buffer.push(v)), // add values to buffer\n        switchMap(() => (emitWhen(buffer) ? of(buffer) : EMPTY)), // emit the buffer when the condition is met\n        tap(() => (buffer = [])) // clear the buffer\n      )\n    })\n}\n\nconst NOOP = () => undefined\n","import {isEqual} from 'lodash'\nimport type {Patch} from '../types/patch'\n\n/**\n * Try to compact a set of patches\n *\n */\nexport function compactPatches(patches: Patch[]) {\n  // If the last patch is unsetting everything, just do that\n  const lastPatch = patches.slice(-1)[0]\n  if (lastPatch && lastPatch.type === 'unset' && lastPatch.path.length === 0) {\n    return [lastPatch]\n  }\n  let finalPatches = patches\n  // Run through the patches and remove any redundant ones.\n  finalPatches = finalPatches.filter((patch, index) => {\n    if (!patch) {\n      return false\n    }\n    const nextPatch = finalPatches[index + 1]\n    if (\n      nextPatch &&\n      nextPatch.type === 'set' &&\n      patch.type === 'set' &&\n      isEqual(patch.path, nextPatch.path)\n    ) {\n      return false\n    }\n    return true\n  })\n  if (finalPatches.length !== patches.length) {\n    return finalPatches\n  }\n  return patches\n}\n","import {isEqual} from 'lodash'\nimport {PortableTextBlock} from '../types/portableText'\nimport {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[]\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: any = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' && '_key' in point.path[0] && point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' && '_key' in point.path[2] && point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find((blk) => blk._key === blockKey)\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (!block.children || block.children.length === 0) {\n      return null\n    }\n    const child = block.children.find((cld: any) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (anchor && value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus}\n  }\n  return null\n}\n","import React, {useCallback} from 'react'\nimport {PortableTextBlock} from '../../types/portableText'\n\ntype Props = {\n  annotation: PortableTextBlock\n  children: React.ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  // eslint-disable-next-line no-alert\n  const handleClick = useCallback(() => alert(JSON.stringify(props.annotation)), [props.annotation])\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n","import React, {ReactElement, useRef, useMemo, useCallback} from 'react'\nimport {Element as SlateElement, Transforms, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../utils/debug'\nimport {IS_DRAGGING, IS_DRAGGING_ELEMENT_RANGE, IS_DRAGGING_CHILD_ELEMENT} from '../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableChild')\ndeclare global {\n  interface Document {\n    // TypeScript removed this function from the default types (2021-08-26)\n    caretPositionFromPoint?(x: number, y: number): {offsetNode: Node; offset: number}\n  }\n}\n\ntype ElementProps = {\n  children: ReactElement\n  element: SlateElement\n  readOnly: boolean\n}\n\nexport const DraggableChild = ({children, element, readOnly}: ElementProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      const isMyDragOver = IS_DRAGGING_CHILD_ELEMENT.get(editor)\n      if (!isMyDragOver) {\n        return\n      }\n      debug('handle drag over')\n      event.preventDefault() // Needed to get the dropEffect showing\n      event.dataTransfer.dropEffect = 'move'\n      // Find the range where the drop happened\n      const range = ReactEditor.findEventRange(editor, event)\n      if (range) {\n        IS_DRAGGING_ELEMENT_RANGE.set(editor, range)\n        Transforms.select(editor, range)\n      }\n    },\n    [editor]\n  )\n\n  // Note: this is called for the dragging child\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_CHILD_ELEMENT.set(editor, element)\n      if (isVoid) {\n        event.dataTransfer.effectAllowed = 'move'\n        // Specify dragImage so that single elements in the preview will not be the drag image,\n        // but always the whole block preview itself.\n        // Also clone it so that it will not be visually clipped by scroll-containers etc.\n        const elm = event.currentTarget\n        if (elm instanceof HTMLElement) {\n          const dragGhost = elm.cloneNode(true) as HTMLElement\n          dragGhostRef.current = dragGhost\n          dragGhost.style.width = `${elm.clientWidth}px`\n          dragGhost.style.height = `${elm.clientHeight}px`\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.top = '-99999px'\n          dragGhost.style.left = '-99999px'\n          if (document.body) {\n            document.body.appendChild(dragGhost)\n            const rect = elm.getBoundingClientRect()\n            const x = event.clientX - rect.left\n            const y = event.clientY - rect.top\n            dragGhost.style.width = `${rect.width}px`\n            dragGhost.style.height = `${rect.height}px`\n            event.dataTransfer.setDragImage(dragGhost, x, y)\n          }\n        }\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  if (readOnly) {\n    return children\n  }\n\n  return (\n    <span draggable={isVoid} onDragStart={handleDragStart} onDragOver={handleDragOver}>\n      {children}\n    </span>\n  )\n}\n","import React, {ReactElement, SyntheticEvent, useCallback} from 'react'\nimport {Element, Range, Text} from 'slate'\nimport {useSelected, useSlateStatic} from '@sanity/slate-react'\nimport {uniq} from 'lodash'\nimport {PortableTextBlock, PortableTextFeatures, TextBlock} from '../types/portableText'\nimport {\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderAnnotationFunction,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {DefaultAnnotation} from './nodes/DefaultAnnotation'\nimport {DraggableChild} from './DraggableChild'\nimport {ElementAttributes} from './Element'\n\nconst debug = debugWithName('components:Leaf')\nconst debugRenders = false\n\ntype LeafProps = {\n  attributes: ElementAttributes\n  children: ReactElement\n  keyGenerator: () => string\n  leaf: Element\n  portableTextFeatures: PortableTextFeatures\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\nexport const Leaf = (props: LeafProps) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const {attributes, children, leaf, portableTextFeatures, keyGenerator, renderChild, readOnly} =\n    props\n  const spanRef = React.useRef(null)\n  let returnedChildren = children\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n  const handleMouseDown = useCallback(\n    (event: SyntheticEvent) => {\n      // Slate will deselect this when it is already selected and clicked again, so prevent that. 2020/05/04\n      if (focused) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n    },\n    [focused]\n  )\n  if (Text.isText(leaf) && leaf._type === portableTextFeatures.types.span.name) {\n    const blockElement = children.props.parent as TextBlock | undefined\n    const path = blockElement ? [{_key: blockElement._key}, 'children', {_key: leaf._key}] : []\n    const decoratorValues = portableTextFeatures.decorators.map((dec) => dec.value)\n    const marks: string[] = uniq(\n      (Array.isArray(leaf.marks) ? leaf.marks : []).filter((mark) => decoratorValues.includes(mark))\n    )\n    marks.forEach((mark) => {\n      const type = portableTextFeatures.decorators.find((dec) => dec.value === mark)\n      if (type) {\n        // TODO: look into this API!\n        if (type?.blockEditor?.render) {\n          const CustomComponent = type?.blockEditor?.render\n          returnedChildren = <CustomComponent mark={mark}>{returnedChildren}</CustomComponent>\n        }\n        if (props.renderDecorator) {\n          returnedChildren = props.renderDecorator(\n            mark,\n            type,\n            {focused, selected, path},\n            () => <>{returnedChildren}</>,\n            spanRef\n          )\n        }\n      }\n    })\n    const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : []\n    const annotations = annotationMarks\n      .map(\n        (mark) =>\n          !decoratorValues.includes(mark) &&\n          blockElement &&\n          blockElement.markDefs &&\n          (blockElement.markDefs.find((def) => def._key === mark) as PortableTextBlock | undefined)\n      )\n      .filter(Boolean) as PortableTextBlock[]\n\n    if (annotations.length > 0) {\n      annotations.forEach((annotation) => {\n        const type = portableTextFeatures.types.annotations.find((t) => t.name === annotation._type)\n        // TODO: look into this API!\n        const CustomComponent = (type as any)?.blockEditor?.render\n        const defaultRender = (): JSX.Element =>\n          // TODO: annotation should be an own prop here, keeping for backward compability (2020/05/18).\n          CustomComponent ? (\n            <CustomComponent {...annotation} attributes={attributes}>\n              {returnedChildren}\n            </CustomComponent>\n          ) : (\n            <>{returnedChildren}</>\n          )\n\n        if (type) {\n          if (props.renderAnnotation) {\n            returnedChildren = (\n              <span ref={spanRef} key={keyGenerator()}>\n                {props.renderAnnotation(\n                  annotation,\n                  type,\n                  {focused, selected, path, annotations},\n                  defaultRender,\n                  spanRef\n                )}\n              </span>\n            )\n          } else {\n            returnedChildren = (\n              <DefaultAnnotation annotation={annotation}>\n                <span ref={spanRef} key={keyGenerator()} onMouseDown={handleMouseDown}>\n                  {defaultRender()}\n                </span>\n              </DefaultAnnotation>\n            )\n          }\n        }\n      })\n    }\n    if (blockElement && renderChild) {\n      const child = blockElement.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n      if (child) {\n        returnedChildren = renderChild(\n          child,\n          portableTextFeatures.types.span,\n          {focused, selected, path, annotations},\n          () => returnedChildren,\n          spanRef\n        )\n      }\n    }\n  }\n  if (debugRenders) {\n    debug(`Render ${leaf._key} (span)`)\n  }\n  const key = leaf._key || keyGenerator()\n\n  return (\n    <span key={key} {...attributes} ref={spanRef}>\n      <DraggableChild element={leaf} readOnly={readOnly}>\n        {returnedChildren}\n      </DraggableChild>\n    </span>\n  )\n}\n","import styled from 'styled-components'\n\nexport const DefaultBlockObject = styled.div`\n  user-select: none;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span`\n  background: #999;\n  border: ${(props: {selected: boolean}) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import React from 'react'\nimport {PortableTextBlock, PortableTextFeatures} from '../../types/portableText'\nimport {DefaultListItem, DefaultListItemInner} from '.'\n\ntype Props = {\n  children: JSX.Element\n  block: PortableTextBlock\n  portableTextFeatures: PortableTextFeatures\n}\nexport default function TextBlock(props: Props) {\n  const {portableTextFeatures, children, block} = props\n  const style = block.style || portableTextFeatures.styles[0].value\n  // Should we render a custom style?\n  // TODO: Look into this API. This is legacy support for older Sanity Studio versions via the type\n  let CustomStyle\n  const blockStyle =\n    portableTextFeatures && style\n      ? portableTextFeatures.styles.find((item) => item.value === style)\n      : undefined\n  if (blockStyle) {\n    CustomStyle = blockStyle.blockEditor && blockStyle.blockEditor.render\n  }\n\n  let renderedBlock = children\n  if ('listItem' in block && block.listItem) {\n    renderedBlock = (\n      <DefaultListItem\n        listStyle={block.listItem || portableTextFeatures.lists[0].value}\n        listLevel={block.level || 0}\n      >\n        <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n      </DefaultListItem>\n    )\n  }\n  return (\n    <>\n      {!CustomStyle && renderedBlock}\n      {CustomStyle && <CustomStyle style={style}>{renderedBlock}</CustomStyle>}\n    </>\n  )\n}\n","import React from 'react'\nimport {PortableTextBlock, PortableTextChild} from '../../types/portableText'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return <pre>{JSON.stringify(props.value, null, 2)}</pre>\n}\n\nexport default DefaultObject\n","import React, {useState, useRef, useMemo, useCallback, DragEvent, useEffect} from 'react'\nimport {Element as SlateElement, Transforms, Path, Editor} from 'slate'\nimport {ReactEditor, useSlateStatic} from '@sanity/slate-react'\nimport {debugWithName} from '../utils/debug'\nimport {\n  IS_DRAGGING_CHILD_ELEMENT,\n  IS_DRAGGING_ELEMENT_TARGET,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n} from '../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\ntype ElementProps = {\n  children: React.ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\nexport const DraggableBlock = ({children, element, readOnly, blockRef}: ElementProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: React.MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(() => Editor.isVoid(editor, element), [editor, element])\n  const isInline = useMemo(() => Editor.isInline(editor, element), [editor, element])\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () => setBlockElement(blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element)),\n    [editor, element, blockRef]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element]\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (dragPosition === 'top' && isBefore && targetPath[0] !== editor.children.length - 1) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath\n            )}`\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath\n          )} (${dragPosition})`\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element]\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element]\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid]\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector('[data-pt-drag-ghost-element]')\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid]\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver && !isDraggingOverFirstBlock && !isDraggingOverLastBlock && dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    []\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n","import React, {ReactElement, FunctionComponent, useRef} from 'react'\nimport {Element as SlateElement, Editor, Range} from 'slate'\nimport {Path} from '@sanity/types'\nimport {useSelected, useSlateStatic, ReactEditor} from '@sanity/slate-react'\nimport {PortableTextBlock, PortableTextFeatures} from '../types/portableText'\nimport {RenderAttributes, RenderBlockFunction, RenderChildFunction} from '../types/editor'\nimport {fromSlateValue} from '../utils/values'\nimport {debugWithName} from '../utils/debug'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport TextBlock from './nodes/TextBlock'\nimport ObjectNode from './nodes/DefaultObject'\nimport {DefaultBlockObject} from './nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\nimport {DraggableChild} from './DraggableChild'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\n\nexport interface ElementAttributes {\n  'data-slate-node': 'element'\n  'data-slate-void'?: true\n  'data-slate-inline'?: true\n  contentEditable?: false\n  dir?: 'rtl'\n  ref: any\n}\n\ntype ElementProps = {\n  attributes: ElementAttributes\n  children: ReactElement\n  element: SlateElement\n  portableTextFeatures: PortableTextFeatures\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\nconst defaultRender = (value: PortableTextBlock) => {\n  return <ObjectNode value={value} />\n}\n\n// eslint-disable-next-line max-statements\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  portableTextFeatures,\n  readOnly,\n  renderBlock,\n  renderChild,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused = (selected && editor.selection && Range.isCollapsed(editor.selection)) || false\n  let className\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const type = portableTextFeatures.types.inlineObjects.find(\n      (_type) => _type.name === element._type\n    )\n    if (!type) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [{_key: block._key}, 'children', {_key: element._key}]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <DraggableChild element={element} readOnly={readOnly}>\n            <span\n              className=\"pt-inline-object\"\n              ref={inlineBlockObjectRef}\n              key={element._key}\n              style={inlineBlockStyle}\n              contentEditable={false}\n            >\n              {renderChild &&\n                renderChild(\n                  fromSlateValue(\n                    [element],\n                    portableTextFeatures.types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  )[0],\n                  type,\n                  {focused, selected, path: elmPath},\n                  defaultRender,\n                  inlineBlockObjectRef\n                )}\n              {!renderChild &&\n                defaultRender(\n                  fromSlateValue(\n                    [element],\n                    portableTextFeatures.types.block.name,\n                    KEY_TO_VALUE_ELEMENT.get(editor)\n                  )[0]\n                )}\n            </span>\n          </DraggableChild>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  const renderAttribs: RenderAttributes = {focused, selected, path: [{_key: element._key}]}\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === portableTextFeatures.types.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    const hasStyle = 'style' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    if (hasStyle) {\n      renderAttribs.style = element.style || 'normal'\n      className = `pt-block pt-text-block pt-text-block-style-${element.style}`\n    }\n    if (isListItem) {\n      renderAttribs.listItem = element.listItem\n      if (Number.isInteger(element.level)) {\n        renderAttribs.level = element.level\n      } else {\n        renderAttribs.level = 1\n      }\n      className += ` pt-list-item pt-list-item-${renderAttribs.listItem} pt-list-item-level-${renderAttribs.level}`\n    }\n    const textBlock = (\n      <TextBlock block={element} portableTextFeatures={portableTextFeatures}>\n        {children}\n      </TextBlock>\n    )\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(\n          fromSlateValue([element], element._type, KEY_TO_VALUE_ELEMENT.get(editor))[0],\n          portableTextFeatures.types.block,\n          renderAttribs,\n          () => textBlock,\n          blockRef\n        )\n      : textBlock\n    return (\n      <div key={element._key} {...attributes} className={className} spellCheck={spellCheck}>\n        <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const type = portableTextFeatures.types.blockObjects.find((_type) => _type.name === element._type)\n  if (!type) {\n    throw new Error(`Could not find schema type for block element of _type ${element._type}`)\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    portableTextFeatures.types.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor)\n  )[0]\n  const renderedBlockFromProps =\n    renderBlock && renderBlock(block, type, renderAttribs, defaultRender, blockRef)\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            {defaultRender(\n              fromSlateValue(\n                [element],\n                portableTextFeatures.types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor)\n              )[0]\n            )}\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n","import React, {useRef, useLayoutEffect, useEffect} from 'react'\n\nconst useIsomorphicEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect\n\nexport function useForwardedRef<T>(ref: React.ForwardedRef<T>): React.MutableRefObject<T | null> {\n  const innerRef = useRef<T | null>(null)\n\n  useIsomorphicEffect(() => {\n    if (!ref) return\n\n    if (typeof ref === 'function') {\n      ref(innerRef.current)\n    } else {\n      ref.current = innerRef.current\n    }\n  })\n\n  return innerRef\n}\n","import {BaseRange, Transforms} from 'slate'\nimport React, {useCallback, useMemo, useEffect, forwardRef} from 'react'\nimport {Editable as SlateEditable, ReactEditor} from '@sanity/slate-react'\nimport {\n  EditorSelection,\n  OnBeforeInputFn,\n  OnCopyFn,\n  OnPasteFn,\n  OnPasteResult,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport {HotkeyOptions} from '../types/options'\nimport {fromSlateValue, isEqualToEmptyEditor, toSlateValue} from '../utils/values'\nimport {normalizeSelection} from '../utils/selection'\nimport {toSlateRange} from '../utils/ranges'\nimport {debugWithName} from '../utils/debug'\nimport {Leaf} from './Leaf'\nimport {Element} from './Element'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {createWithInsertData, createWithHotkeys} from './plugins'\nimport {useForwardedRef} from './hooks/useForwardedRef'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: React.CSSProperties = {\n  opacity: 0.5,\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n}\n\nconst NOOP = () => {\n  // Nope\n}\ntype DOMNode = globalThis.Node\n\nconst isDOMNode = (value: unknown): value is DOMNode => {\n  return value instanceof Node\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {editable: true})\n}\n\nexport type PortableTextEditableProps = {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: OnBeforeInputFn\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderPlaceholder?: () => React.ReactNode\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\nconst EMPTY_DECORATORS: BaseRange[] = []\n\nexport const PortableTextEditable = forwardRef(function PortableTextEditable(\n  props: PortableTextEditableProps & Omit<React.HTMLProps<HTMLDivElement>, 'as' | 'onPaste'>,\n  forwardedRef: React.ForwardedRef<HTMLDivElement>\n) {\n  const {\n    hotkeys,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderPlaceholder,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const ref = useForwardedRef(forwardedRef)\n\n  const {\n    change$,\n    keyGenerator,\n    portableTextFeatures,\n    slateInstance: slateEditor,\n  } = portableTextEditor\n\n  // React/UI-spesific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(change$, portableTextFeatures, keyGenerator),\n    [change$, keyGenerator, portableTextFeatures]\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(portableTextFeatures, keyGenerator, portableTextEditor, hotkeys),\n    [hotkeys, keyGenerator, portableTextEditor, portableTextFeatures]\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: any) => (\n      <Element\n        {...eProps}\n        portableTextFeatures={portableTextFeatures}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        spellCheck={spellCheck}\n      />\n    ),\n    [portableTextFeatures, spellCheck, readOnly, renderBlock, renderChild]\n  )\n\n  const renderLeaf = useCallback(\n    (lProps: any) => {\n      if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === '') {\n        return (\n          <>\n            <div style={PLACEHOLDER_STYLE} contentEditable={false}>\n              {renderPlaceholder()}\n            </div>\n            <Leaf\n              {...lProps}\n              keyGenerator={keyGenerator}\n              portableTextFeatures={portableTextFeatures}\n              renderAnnotation={renderAnnotation}\n              renderChild={renderChild}\n              renderDecorator={renderDecorator}\n              readOnly={readOnly}\n            />\n          </>\n        )\n      }\n      return (\n        <Leaf\n          {...lProps}\n          keyGenerator={keyGenerator}\n          portableTextFeatures={portableTextFeatures}\n          renderAnnotation={renderAnnotation}\n          renderChild={renderChild}\n          renderDecorator={renderDecorator}\n          readOnly={readOnly}\n        />\n      )\n    },\n    [\n      readOnly,\n      keyGenerator,\n      portableTextFeatures,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n    ]\n  )\n\n  // Restore selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, portableTextFeatures.types.block.name)\n      )\n      if (normalizedSelection !== null) {\n        debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`)\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set selection operations in the\n          // editor (this is usually automatically outputted by the withPortableTextSelections plugin)\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            change$.next({type: 'selection', selection: normalizedSelection})\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [slateEditor, propsSelection, portableTextFeatures.types.block.name, change$])\n\n  // Set initial selection from props\n  useEffect(() => {\n    if (propsSelection) {\n      PortableTextEditor.select(portableTextEditor, propsSelection)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []) // Only initial\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy]\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: React.ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n      // Resolve it as promise (can be either async promise or sync return value)\n      new Promise<OnPasteResult>((resolve) => {\n        resolve(\n          onPaste({\n            event,\n            value: PortableTextEditor.getValue(portableTextEditor),\n            path: slateEditor.selection?.focus.path || [],\n            portableTextFeatures, // New key added in v.2.23.2\n            type: portableTextFeatures.types.portableText, // For legacy support\n          })\n        )\n      })\n        .then((result) => {\n          debug('Custom paste function from client resolved', result)\n          change$.next({type: 'loading', isLoading: true})\n          if (!result || !result.insert) {\n            debug('No result from custom paste handler, pasting normally')\n            slateEditor.insertData(event.clipboardData)\n            return\n          }\n          if (result && result.insert) {\n            slateEditor.insertFragment(toSlateValue(result.insert, {portableTextFeatures}))\n            change$.next({type: 'loading', isLoading: false})\n            return\n          }\n          console.warn('Your onPaste function returned something unexpected:', result)\n        })\n        .catch((error) => {\n          change$.next({type: 'loading', isLoading: false})\n          console.error(error) // eslint-disable-line no-console\n          return error\n        })\n    },\n    [change$, onPaste, portableTextEditor, portableTextFeatures, slateEditor]\n  )\n\n  const handleOnFocus = useCallback(() => {\n    change$.next({type: 'focus'})\n  }, [change$])\n\n  const handleOnBlur = useCallback(() => {\n    change$.next({type: 'blur'})\n  }, [change$])\n\n  const handleOnBeforeInput = useCallback(\n    (event: Event) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput]\n  )\n\n  const handleKeyDown = slateEditor.pteWithHotKeys\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return NOOP\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate = useCallback(() => {\n    if (isEqualToEmptyEditor(slateEditor.children, portableTextFeatures)) {\n      return [\n        {\n          anchor: {\n            path: [0, 0],\n            offset: 0,\n          },\n          focus: {\n            path: [0, 0],\n            offset: 0,\n          },\n          placeholder: true,\n        },\n      ]\n    }\n    return EMPTY_DECORATORS\n  }, [portableTextFeatures, slateEditor.children])\n\n  // The editor\n  const slateEditable = useMemo(\n    () => (\n      <SlateEditable\n        autoFocus={false}\n        className=\"pt-editable\"\n        decorate={decorate}\n        onBlur={handleOnBlur}\n        onCopy={handleCopy}\n        onDOMBeforeInput={handleOnBeforeInput}\n        onFocus={handleOnFocus}\n        onKeyDown={handleKeyDown}\n        onPaste={handlePaste}\n        readOnly={readOnly}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n      />\n    ),\n    [\n      decorate,\n      handleCopy,\n      handleKeyDown,\n      handleOnBeforeInput,\n      handleOnBlur,\n      handleOnFocus,\n      handlePaste,\n      readOnly,\n      renderElement,\n      renderLeaf,\n      scrollSelectionIntoViewToSlate,\n    ]\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return (\n    <div ref={ref} {...restProps}>\n      {slateEditable}\n    </div>\n  )\n})\n"],"names":["compileType","rawType","Schema","compile","name","types","get","getPortableTextFeatures","portabletextType","_a","_b","_c","Error","blockType","of","find","findBlockType","childrenField","fields","field","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","annotations","resolveEnabledAnnotationTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","map","an","styleField","btField","textStyles","options","list","style","value","length","annotation","blockEditor","title","icon","listField","listItems","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports","setIfMissing","path","DMP.diff_match_patch","diffMatchPatch","currentValue","nextValue","_patch","insert","items","position","set","unset","validateValue","portableTextFeatures","keyGenerator","resolution","valid","validChildTypes","t","validBlockTypes","isArray","description","action","item","some","blk","index","isObject","_key","_type","includes","currentBlockTypeName","children","markDefs","allUsedMarks","uniq","flatten","cld","marks","annotationMarks","mark","dec","orphanedMarks","def","child","cmrk","newSpan","cIndex","newchild","rootName","debug","debugWithName","namespace","enabled","EMPTY_MARKDEFS","keepObjectEquality","object","keyMap","isEqual","toSlateValue","rest","voidChildren","isPortableText","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","cType","cKey","cRest","__inline","Element","isElement","fromSlateValue","textBlockType","_cType","v","k","_i","blockValue","isEqualToEmptyEditor","Text","isText","getValueOrInitialValue","initialValue","IS_DRAGGING","WeakMap","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_CHILD_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_ELEMENT_RANGE","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","FLUSH_PATCHES_DEBOUNCE_MS","process","env","NODE_ENV","PortableTextEditorContext","createContext","usePortableTextEditor","editor","useContext","PortableTextEditorSelectionContext","usePortableTextEditorSelection","selection","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","readOnly","PortableTextEditorValueContext","createOperationToPatches","textBlockName","insertTextPatch","operation","beforeValue","JSON","stringify","isTextBlock","textChild","prevBlock","prevChild","prevText","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","blockKey","childKey","Object","keys","forEach","keyName","val","insertNodePatch","targetKey","node","splitNodePatch","splitBlock","oldBlock","targetValue","spansToUnset","slice","splitSpan","targetSpans","removeNodePatch","_","spanToRemove","mergeNodePatch","newBlock","mergedSpan","targetBlock","targetSpan","moveNodePatch","newPath","targetChild","childToInsert","createKeyedPath","point","blockPath","keyedBlockPath","keyedChildPath","childPath","createArrayedPath","from","Editor","nodes","at","isKeySegment","isVoid","childIndex","findIndex","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","toSlateRange","createWithEditableAPI","portableTextEditor","withEditableAPI","setEditable","Transforms","select","onChange","ReactEditor","blur","toggleMark","pteToggleMark","toggleList","listStyle","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","console","warn","undo","redo","slateSelection","deselect","focusBlock","isBlock","focusChild","mode","voids","pseudoBlock","insertChild","insertNode","insertBlock","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","element","findByPath","slatePath","ptBlock","ptChild","findDOMNode","toDOMNode","activeAnnotations","spans","depth","addAnnotation","SlateElement","annotationKey","setNodes","Range","isCollapsed","pteExpandToWord","textNode","withoutNormalizing","normalize","newSelection","insertNodes","end","spanPath","markDefPath","delete","hanging","nodeAndPaths","p","removeNodes","removeAnnotation","nodePath","isExpanded","newMarks","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","createWithMaxBlocks","withMaxBlocks","apply","rows","maxBlocks","PRESERVE_KEYS","withPreserveKeys","fn","prev","isPreservingKeys","createWithObjectKeys","withKeys","normalizeNode","properties","withNewKey","isEditor","entry","Node","PATCHING","withoutPatching","isPatching","BEFORE","AFTER","array","args","len","idx","normalizedIdx","copy","values","reduce","hasOwn","call","bind","move","arr","to","findTargetIndex","pathSegment","head","tail","applyPatch","clone","omit","OPERATIONS","_currentValue","_nextValue","inc","SUPPORTED_PATCH_TYPES","func","applyAll","_apply","applyArrayPatch","isString","applyStringPatch","applyObjectPatch","applyPrimitivePatch","res","createPatchToOperations","findLastKey","blockIndex","indx","parsed","distance","debugState","insertPatch","blocksToInsert","posKey","isKeyedSegment","childrenToInsert","targetPath","setPatch","nextRest","prevChildren","prevRest","c","prevSel","onSamePath","newVal","unsetPatch","previousPatch","lastKey","unit","needToAdjust","isMergeUnset","changed","error","segment","key","reverse","part","stateName","SAVING","MERGING","UNDO_STEP_LIMIT","isMerging","isSaving","createWithUndoRedo","incomingPatches$","cleanupFn","incomingPatches","sub","subscribe","origin","time","unsubscribe","history","undos","redos","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","stp","createSelectOperation","timestamp","shouldClear","otherPatches","transformedOperations","transformOperation","withoutSaving","Operation","inverse","transformedOperation","adjustBlockPath","patchIsRemovingText","diff","splitOperation","Path","isPath","insertOffset","insertTextOperation","removeTextOperation","level","myIndex","equals","createWithPatches","patchFunctions","change$","syncValue","previousChildren","patchToOperations","patchSubscription","withPatches","syncValueAfterIncomingPatches","debounce","trailing","leading","snapshot","remotePatches","editorWasEmpty","editorIsEmpty","next","previousValue","createWithPlaceholderBlock","withPlaceholderBlock","createPlaceholderBlock","createWithPortableTextBlockStyle","defaultStyle","withPortableTextBlockStyle","nodeEntry","SlateText","selectedBlocks","MAX_LIST_LEVEL","createWithPortableTextLists","withPortableTextLists","listItemStyle","isActive","pteUnsetListItem","pteSetListItem","isListBlock","listItem","newNode","pteEndList","pteIncrementBlockLevels","createWithPortableTextMarkModel","withPortableTextMarkModel","mergeSpans","isSpan","oldDefs","newMarkDefs","isNormalized","isElementProps","normalizeMarkDefs","splitNodes","marksWithoutAnnotationMarks","addMark","splitTextNodes","shouldRemoveMark","removeMark","eMark","existingMarks","parent","nextPath","nextNode","mergeNodes","blocks","createWithPortableTextSelections","withPortableTextSelections","emitPortableTextSelection","hasChanges","createWithSchemaTypes","withSchemaTypes","isTextSpan","Boolean","isInteger","obj","isInline","inlineSchemaTypes","isInsertTextWithoutType","insertNodeOperation","createWithUtils","withUtils","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","createEmptyBlock","withHotKeys","pteWithHotKeys","event","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isBackspace","isDelete","prevPath","previous","stopPropagation","nextBlock","focusBlockPath","edges","endAtEndOfNode","isEnd","insertText","createWithInsertData","withInsertData","blockTypeName","spanTypeName","toPlainText","setFragmentData","originEvent","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","attributes","hasAttribute","div","ownerDocument","createElement","appendChild","setAttribute","body","asHTML","innerHTML","removeChild","fragment","getFragment","asJSON","asPlainText","clearData","setData","insertPortableTextData","pText","getData","parse","slateValue","regenerateKeys","validation","errorDescription","mixMarkDefs","insertFragment","insertTextOrHTMLData","isLoading","insertedType","htmlToBlocks","normalizeBlock","escapeHtml","textToHtml","insertData","insertFragmentData","entityMap","oldKey","newKey","nodeWithNewKeys","originalFnMap","withPlugins","destroy","operationToPatches","withObjectKeys","withPatchesCleanupFunction","withUndoRedo","withUndoRedoCleanupFunction","originalFunctions","defaultKeyGenerator","randomKey","PortableTextEditor","React","Component","constructor","props","Subject","pendingPatches","returnedPatches","editable","userCallbackFn","callbackFn","slateInstance","hasPendingLocalPatches","current","retrySync","oldSel","isEqualToValue","compareBlock","setState","invalidValueResolution","slateValueFromProps","flush","finalPatches","flushDebounced","createRef","state","pipe","tap","bufferUntil","concatMap","incoming","share","changeSubscription","withReact","createEditor","componentWillUnmount","componentDidUpdate","prevProps","render","jsx","Provider","Slate","NOOP","isObjectPath","isChildObjectEditPath","isBlockObjectEditPath","throttle","syncFn","emitWhen","source","defer","buffer","switchMap","EMPTY","compactPatches","lastPatch","nextPatch","normalizePoint","newOffset","normalizeSelection","newAnchor","newFocus","DefaultAnnotation","handleClick","useCallback","alert","color","onClick","DraggableChild","useSlateStatic","dragGhostRef","useRef","useMemo","handleDragOver","isMyDragOver","dataTransfer","dropEffect","findEventRange","handleDragStart","effectAllowed","currentTarget","HTMLElement","dragGhost","cloneNode","width","clientWidth","height","clientHeight","top","left","document","rect","getBoundingClientRect","clientX","clientY","setDragImage","draggable","onDragStart","onDragOver","Leaf","selected","useSelected","leaf","renderChild","spanRef","returnedChildren","focused","handleMouseDown","blockElement","decoratorValues","CustomComponent","renderDecorator","Fragment","defaultRender","renderAnnotation","ref","onMouseDown","_child","DefaultBlockObject","styled","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","bullets","normalizedLevel","TextBlock","CustomStyle","renderedBlock","jsxs","DefaultObject","DraggableBlock","blockRef","isDragOver","setIsDragOver","useState","setBlockElement","useEffect","elementRect","Y","pageY","handleDragLeave","handleDragEnd","dragPosition","findPath","myPath","isBefore","originalPath","moveNodes","handleDrop","handleDrag","target","opacity","customGhost","querySelector","boxSizing","isDraggingOverFirstBlock","isDraggingOverLastBlock","isDraggingOverTop","isDraggingOverBottom","dropIndicator","className","borderBottom","zIndex","onDrag","onDragLeave","onDragEnd","onDrop","inlineBlockStyle","display","ObjectNode","renderBlock","spellCheck","inlineBlockObjectRef","elmPath","contentEditable","renderAttribs","isListItem","hasStyle","propsOrDefaultRendered","renderedBlockFromProps","useIsomorphicEffect","window","useLayoutEffect","useForwardedRef","innerRef","PLACEHOLDER_STYLE","userSelect","pointerEvents","EMPTY_DECORATORS","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","slateEditor","renderElement","eProps","renderLeaf","lProps","placeholder","normalizedSelection","slateRange","o","handleCopy","result","handlePaste","clipboardData","Promise","resolve","then","catch","handleOnFocus","handleOnBlur","handleOnBeforeInput","handleKeyDown","scrollSelectionIntoViewToSlate","decorate","slateEditable","SlateEditable","autoFocus","onBlur","onDOMBeforeInput","onFocus","onKeyDown"],"mappings":"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"}