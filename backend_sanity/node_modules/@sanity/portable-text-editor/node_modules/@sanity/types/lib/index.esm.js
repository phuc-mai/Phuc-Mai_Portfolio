function isObject(obj) {
  return typeof obj === "object" && obj !== null && !Array.isArray(obj);
}
function isReference(reference) {
  return isObject(reference) && typeof reference._ref === "string";
}
function isImage(value) {
  return isObject(value) && isReference(value.asset) && value.asset._ref.startsWith("image-");
}
function isCrossDatasetReference(reference) {
  return isObject(reference) && typeof reference._ref === "string" && typeof reference._dataset === "string" && typeof reference._projectId === "string";
}
function isSanityDocument(document) {
  return isObject(document) && typeof document._id === "string" && typeof document._type === "string";
}
function isTypedObject(obj) {
  return isObject(obj) && typeof obj._type === "string";
}
function isKeyedObject(obj) {
  return isObject(obj) && typeof obj._key === "string";
}
function isValidationErrorMarker(marker) {
  return marker.level === "error";
}
function isValidationWarningMarker(marker) {
  return marker.level === "warning";
}
function isValidationInfoMarker(marker) {
  return marker.level === "info";
}
function isCreateMutation(mutation) {
  return "create" in mutation;
}
function isCreateIfNotExistsMutation(mutation) {
  return "createIfNotExists" in mutation;
}
function isCreateOrReplaceMutation(mutation) {
  return "createOrReplace" in mutation;
}
function isDeleteMutation(mutation) {
  return "delete" in mutation;
}
function isPatchMutation(mutation) {
  return "patch" in mutation;
}
const reKeySegment = /_key\s*==\s*['"](.*)['"]/;
const reIndexTuple = /^\d*:\d*$/;
function isIndexSegment(segment) {
  return typeof segment === "number" || typeof segment === "string" && /^\[\d+\]$/.test(segment);
}
function isKeySegment(segment) {
  if (typeof segment === "string") {
    return reKeySegment.test(segment.trim());
  }
  return typeof segment === "object" && "_key" in segment;
}
function isIndexTuple(segment) {
  if (typeof segment === "string" && reIndexTuple.test(segment)) {
    return true;
  }
  if (!Array.isArray(segment) || segment.length !== 2) {
    return false;
  }
  const [from, to] = segment;
  return (typeof from === "number" || from === "") && (typeof to === "number" || to === "");
}
function isRecord$1(value) {
  return !!value && (typeof value == "object" || typeof value == "function");
}
function isBlock(value) {
  return isRecord$1(value) && typeof value._type === "string" && typeof value.style === "string" && Array.isArray(value.children) && Array.isArray(value.markDefs);
}
function isSpan(value) {
  return isRecord$1(value) && value._type === "span" && typeof value.text === "string" && Array.isArray(value.marks);
}
function isRecord(value) {
  return !!value && (typeof value == "object" || typeof value == "function");
}
function isDocumentSchemaType(type) {
  if (!isObjectSchemaType(type)) {
    return false;
  }
  let current = type;
  while (current) {
    if (current.name === "document") {
      return true;
    }
    current = current.type;
  }
  return false;
}
function isObjectSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === "object";
}
function isArraySchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === "array";
}
function isArrayOfObjectsSchemaType(type) {
  return isArraySchemaType(type) && type.of.every(memberType => isObjectSchemaType(memberType));
}
function isArrayOfPrimitivesSchemaType(type) {
  return isArraySchemaType(type) && type.of.every(memberType => isPrimitiveSchemaType(memberType));
}
function isBooleanSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === "boolean";
}
function isStringSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === "string";
}
function isNumberSchemaType(type) {
  if (!isRecord(type)) return false;
  return type.jsonType === "number";
}
function isPrimitiveSchemaType(type) {
  return isBooleanSchemaType(type) || isStringSchemaType(type) || isNumberSchemaType(type);
}
function isReferenceSchemaType(type) {
  return isRecord(type) && (type.name === "reference" || isReferenceSchemaType(type.type));
}
function isCrossDatasetReferenceSchemaType(type) {
  return isRecord(type) && (type.name === "crossDatasetReference" || isCrossDatasetReferenceSchemaType(type.type));
}
function isTitledListValue(item) {
  return typeof item === "object" && item !== null && "title" in item && "value" in item;
}
function isSpanSchemaType(type) {
  if (!isRecord(type)) return false;
  return Array.isArray(type.annotations) && Array.isArray(type.decorators);
}
function isBlockSchemaType(type) {
  if (!isRecord(type)) return false;
  if (!Array.isArray(type.fields)) return false;
  const [maybeSpanChildren, maybeStyle, maybeList] = type.fields;
  return isBlockChildrenObjectField(maybeSpanChildren) && isStyleObjectField(maybeStyle) && isListObjectField(maybeList);
}
function isStyleObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== "style") return false;
  return isRecord(field.type) && field.type.jsonType === "string";
}
function isListObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== "list") return false;
  return isRecord(field.type) && field.type.jsonType === "string";
}
function isBlockChildrenObjectField(field) {
  if (!isRecord(field)) return false;
  if (field.name !== "children") return false;
  if (!isArraySchemaType(field.type)) return false;
  return field.type.of.some(isSpanSchemaType);
}
function defineType(schemaDefinition, defineOptions) {
  return schemaDefinition;
}
function defineField(schemaField, defineOptions) {
  return schemaField;
}
function defineArrayMember(arrayOfSchema, defineOptions) {
  return arrayOfSchema;
}
function typed(input) {
  return input;
}
function isCreateSquashedMutation(mutation) {
  return "createSquashed" in mutation;
}
function isValidationError(node) {
  return node.level === "error";
}
function isValidationWarning(node) {
  return node.level === "warning";
}
function isValidationInfo(node) {
  return node.level === "info";
}
export { defineArrayMember, defineField, defineType, isArrayOfObjectsSchemaType, isArrayOfPrimitivesSchemaType, isArraySchemaType, isBlock, isBlockChildrenObjectField, isBlockSchemaType, isBooleanSchemaType, isCreateIfNotExistsMutation, isCreateMutation, isCreateOrReplaceMutation, isCreateSquashedMutation, isCrossDatasetReference, isCrossDatasetReferenceSchemaType, isDeleteMutation, isDocumentSchemaType, isImage, isIndexSegment, isIndexTuple, isKeySegment, isKeyedObject, isListObjectField, isNumberSchemaType, isObjectSchemaType, isPatchMutation, isPrimitiveSchemaType, isReference, isReferenceSchemaType, isSanityDocument, isSpan, isSpanSchemaType, isStringSchemaType, isStyleObjectField, isTitledListValue, isTypedObject, isValidationError, isValidationErrorMarker, isValidationInfo, isValidationInfoMarker, isValidationWarning, isValidationWarningMarker, typed };
//# sourceMappingURL=index.esm.js.map
