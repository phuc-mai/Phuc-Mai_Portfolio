"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseRoute;
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var VALID_PARAM_SEGMENT = /^[a-zA-Z0-9_-]+$/;
function createSegment(segment) {
  if (!segment) {
    return null;
  }
  if (segment.startsWith(':')) {
    var paramName = segment.substring(1);
    if (!VALID_PARAM_SEGMENT.test(paramName)) {
      var addendum = segment.includes('*') ? ' Splats are not supported. Consider using child routes instead' : '';
      // eslint-disable-next-line no-console
      console.error(new Error("Warning: Param segments \"".concat(segment, "\" includes invalid characters.").concat(addendum)));
    }
    return {
      type: 'param',
      name: paramName
    };
  }
  return {
    type: 'dir',
    name: segment
  };
}
function parseRoute(route) {
  var _route$split = route.split('?'),
    _route$split2 = _slicedToArray(_route$split, 1),
    pathname = _route$split2[0];
  var segments = pathname.split('/').map(createSegment).filter(Boolean);
  return {
    raw: route,
    segments: segments
  };
}