"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactDom = require("react-dom");
var _nanoPubsub = _interopRequireDefault(require("nano-pubsub"));
var _RouterContext = require("../RouterContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class RouterProvider extends _react.default.Component {
  constructor(props) {
    var _this;
    super(props);
    _this = this;
    _defineProperty(this, "__internalRouter", void 0);
    _defineProperty(this, "_state", void 0);
    _defineProperty(this, "navigateUrl", function (url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var onNavigate = _this.props.onNavigate;
      onNavigate(url, options);
    });
    _defineProperty(this, "navigateState", function (nextState) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      _this.navigateUrl(_this.resolvePathFromState(nextState), options);
    });
    _defineProperty(this, "getState", () => this._state);
    _defineProperty(this, "resolvePathFromState", state => {
      return this.props.router.encode(state);
    });
    _defineProperty(this, "navigateIntent", function (intentName, params) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      _this.navigateUrl(_this.resolveIntentLink(intentName, params), options);
    });
    _defineProperty(this, "resolveIntentLink", (intentName, parameters) => {
      var _ref = Array.isArray(parameters) ? parameters : [parameters],
        _ref2 = _slicedToArray(_ref, 2),
        params = _ref2[0],
        payload = _ref2[1];
      return this.props.router.encode({
        intent: intentName,
        params,
        payload
      });
    });
    this._state = props.state;
    this.__internalRouter = {
      resolvePathFromState: this.resolvePathFromState,
      resolveIntentLink: this.resolveIntentLink,
      navigateUrl: this.navigateUrl,
      navigate: this.navigateState,
      navigateIntent: this.navigateIntent,
      getState: this.getState,
      channel: (0, _nanoPubsub.default)()
    };
  }
  getChildContext() {
    return {
      __internalRouter: this.__internalRouter
    };
  }
  componentDidUpdate(prevProps) {
    var currentState = this.props.state;
    var prevState = prevProps.state;
    if (!(0, _isEqual2.default)(currentState, prevState)) {
      this._state = currentState;
      setTimeout(() => {
        (0, _reactDom.unstable_batchedUpdates)(() => {
          this.__internalRouter.channel.publish(currentState);
        });
      }, 0);
    }
  }
  render() {
    return /*#__PURE__*/_react.default.createElement(_RouterContext.RouterContext.Provider, {
      value: this.__internalRouter
    }, this.props.children);
  }
}
exports.default = RouterProvider;
_defineProperty(RouterProvider, "childContextTypes", {
  __internalRouter: _propTypes.default.object
});