"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueryResults = exports.default = void 0;
var _operators = require("rxjs/operators");
var _rxjs = require("rxjs");
var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));
var _reactPropsStream = require("react-props-stream");
var _listenQuery = require("../datastores/document/listenQuery");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var INITIAL_CHILD_PROPS = {
  result: null,
  error: false
};
var createResultChildProps = documents => ({
  result: {
    documents
  },
  loading: false,
  error: false
});
var createErrorChildProps = error => ({
  result: null,
  loading: false,
  error
});
var getQueryResults = function getQueryResults(receivedProps$) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _createEventHandler = (0, _reactPropsStream.createEventHandler)(),
    _createEventHandler2 = _slicedToArray(_createEventHandler, 2),
    onRetry$ = _createEventHandler2[0],
    onRetry = _createEventHandler2[1];
  var queryProps$ = receivedProps$.pipe((0, _operators.map)(props => ({
    query: props.query,
    params: props.params
  })), (0, _operators.distinctUntilChanged)(_reactFastCompare.default), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
  var queryResults$ = queryProps$.pipe((0, _operators.switchMap)(queryProps => {
    var query$ = (0, _listenQuery.listenQuery)(queryProps.query, queryProps.params, options).pipe((0, _operators.map)(createResultChildProps), (0, _operators.share)());
    return (0, _rxjs.merge)((0, _rxjs.of)({
      loading: true
    }).pipe((0, _operators.delay)(400), (0, _operators.takeUntil)(query$)), query$);
  }));
  return queryResults$.pipe((0, _operators.startWith)(INITIAL_CHILD_PROPS), (0, _operators.catchError)((err, caught$) => (0, _rxjs.concat)((0, _rxjs.of)(createErrorChildProps(err)), (0, _rxjs.merge)((0, _rxjs.fromEvent)(window, 'online'), onRetry$).pipe((0, _operators.take)(1), (0, _operators.mergeMapTo)(caught$)))), (0, _operators.scan)((prev, next) => _objectSpread(_objectSpread(_objectSpread({}, prev), next), {}, {
    onRetry
  })));
};

// todo: split into separate standalone parts so that behavior can be re-used
exports.getQueryResults = getQueryResults;
var _default = (0, _reactPropsStream.streamingComponent)(receivedProps$ => {
  var resultProps$ = getQueryResults(receivedProps$);
  return (0, _rxjs.combineLatest)(receivedProps$, resultProps$).pipe((0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 2),
      receivedProps = _ref2[0],
      queryResult = _ref2[1];
    var children = receivedProps.children,
      mapFn = receivedProps.mapFn;
    if (typeof mapFn === 'function') {
      // eslint-disable-next-line no-console
      console.warn('The mapFn prop of the <QueryContainer/> is removed.');
    }
    return children(queryResult);
  }));
});
exports.default = _default;