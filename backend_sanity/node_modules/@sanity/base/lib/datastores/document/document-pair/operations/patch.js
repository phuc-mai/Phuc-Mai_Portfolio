"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.patch = void 0;
var _isLiveEditEnabled = require("../utils/isLiveEditEnabled");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// todo: we could also consider exposing 'mutate' directly
var patch = {
  disabled: () => false,
  execute: function execute(_ref) {
    var snapshots = _ref.snapshots,
      idPair = _ref.idPair,
      draft = _ref.draft,
      published = _ref.published,
      typeName = _ref.typeName;
    var patches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var initialDocument = arguments.length > 2 ? arguments[2] : undefined;
    if ((0, _isLiveEditEnabled.isLiveEditEnabled)(typeName)) {
      // No drafting, so patch and commit the published document
      published.mutate([published.createIfNotExists(_objectSpread({
        _type: typeName
      }, initialDocument)), ...published.patch(patches)]);
    } else {
      draft.mutate([draft.createIfNotExists(_objectSpread(_objectSpread(_objectSpread({}, initialDocument), snapshots.published), {}, {
        _id: idPair.draftId,
        _type: typeName
      })), ...draft.patch(patches)]);
    }
  }
};
exports.patch = patch;