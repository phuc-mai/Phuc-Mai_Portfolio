"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.editState = void 0;
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _createMemoizer = require("../utils/createMemoizer");
var _isLiveEditEnabled = require("./utils/isLiveEditEnabled");
var _snapshotPair = require("./snapshotPair");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var LOCKED = {
  enabled: true
};
var NOT_LOCKED = {
  enabled: false
};
var editState = (0, _createMemoizer.memoize)((idPair, typeName) => {
  var liveEdit = (0, _isLiveEditEnabled.isLiveEditEnabled)(typeName);
  return (0, _snapshotPair.snapshotPair)(idPair, typeName).pipe((0, _operators.switchMap)(versions => (0, _rxjs.combineLatest)([versions.draft.snapshots$, versions.published.snapshots$, versions.transactionsPendingEvents$.pipe((0, _operators.map)(ev => ev.phase === 'begin' ? LOCKED : NOT_LOCKED), (0, _operators.startWith)(NOT_LOCKED))])), (0, _operators.map)(_ref => {
    var _ref2 = _slicedToArray(_ref, 3),
      draftSnapshot = _ref2[0],
      publishedSnapshot = _ref2[1],
      transactionSyncLock = _ref2[2];
    return {
      id: idPair.publishedId,
      type: typeName,
      draft: draftSnapshot,
      published: publishedSnapshot,
      liveEdit,
      ready: true,
      transactionSyncLock
    };
  }), (0, _operators.startWith)({
    id: idPair.publishedId,
    type: typeName,
    draft: null,
    published: null,
    liveEdit,
    ready: false,
    transactionSyncLock: null
  }), (0, _operators.publishReplay)(1), (0, _operators.refCount)());
}, (idPair, typeName) => idPair.publishedId + typeName);
exports.editState = editState;