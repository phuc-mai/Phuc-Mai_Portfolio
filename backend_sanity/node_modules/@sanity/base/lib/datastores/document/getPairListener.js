"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPairListener = getPairListener;
var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var PENDING_START = {
  type: 'pending',
  phase: 'begin'
};
var PENDING_END = {
  type: 'pending',
  phase: 'end'
};
function isMutationEvent(msg) {
  return msg.type === 'mutation';
}
function isMultiTransactionEvent(msg) {
  return msg.transactionTotalEvents > 1;
}
function allPendingTransactionEventsReceived(listenerEvents) {
  var groupedMutations = (0, _groupBy2.default)(listenerEvents.filter(ev => ev.type === 'mutation'), e => e.transactionId);
  // Note: we can't assume that the events come in order, so instead of checking the counter attributes we check that we have actually received all
  return Object.values(groupedMutations).every(mutations => mutations.length === mutations[0].transactionTotalEvents);
}
function getPairListener(client, idPair) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var publishedId = idPair.publishedId,
    draftId = idPair.draftId;
  return (0, _rxjs.defer)(() => client.observable.listen("*[_id == $publishedId || _id == $draftId]", {
    publishedId,
    draftId
  }, {
    includeResult: false,
    events: ['welcome', 'mutation', 'reconnect'],
    effectFormat: 'mendoza',
    tag: options.tag || 'document.pair-listener'
  })).pipe((0, _operators.concatMap)(event => event.type === 'welcome' ? fetchInitialDocumentSnapshots().pipe((0, _operators.concatMap)(snapshots => [createSnapshotEvent(draftId, snapshots.draft), createSnapshotEvent(publishedId, snapshots.published)])) : (0, _rxjs.of)(event)), (0, _operators.scan)((acc, msg) => {
    // we only care about mutation events
    if (!isMutationEvent(msg)) {
      return {
        next: [msg],
        buffer: []
      };
    }
    var isBuffering = acc.buffer.length > 0;
    var isMulti = isMultiTransactionEvent(msg);
    if (!isMulti && !isBuffering) {
      // simple case, we have no buffer, and the event is a single-transaction event, so just pass it on
      return {
        next: [msg],
        buffer: []
      };
    }
    if (!isMulti) {
      // we have received a single transaction event while waiting for the rest of events from a multi transaction
      // put it in the buffer
      return {
        next: [],
        buffer: acc.buffer.concat(msg)
      };
    }
    var nextBuffer = acc.buffer.concat(msg);
    if (allPendingTransactionEventsReceived(nextBuffer)) {
      // we have received all pending transactions, emit the buffer, and signal end of buffer
      return {
        next: nextBuffer.concat(PENDING_END),
        buffer: []
      };
    }
    // if we get here, we are still waiting for more multi-transaction messages
    // if nextBuffer only has one element, we know we just started buffering
    return {
      next: nextBuffer.length === 1 ? [PENDING_START] : [],
      buffer: nextBuffer
    };
  }, {
    next: [],
    buffer: []
  }),
  // note: this flattens the array, and in the case of an empty array, no event will be pushed downstream
  (0, _operators.mergeMap)(v => v.next));
  function fetchInitialDocumentSnapshots() {
    return client.observable.getDocuments([draftId, publishedId], {
      tag: 'document.snapshots'
    }).pipe((0, _operators.map)(_ref => {
      var _ref2 = _slicedToArray(_ref, 2),
        draft = _ref2[0],
        published = _ref2[1];
      return {
        draft,
        published
      };
    }));
  }
}
function createSnapshotEvent(documentId, document) {
  return {
    type: 'snapshot',
    documentId,
    document
  };
}