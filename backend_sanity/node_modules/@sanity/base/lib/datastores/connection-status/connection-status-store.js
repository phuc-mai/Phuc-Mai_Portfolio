"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onRetry = exports.connectionStatus$ = exports.CONNECTING = void 0;
var _operators = require("rxjs/operators");
var _rxjs = require("rxjs");
var _observableCallback3 = require("observable-callback");
var _bifur = require("../../client/bifur");
var _catchWithCount = require("./utils/catchWithCount");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var onOnline$ = (0, _rxjs.fromEvent)(window, 'online');
var onOffline$ = (0, _rxjs.fromEvent)(window, 'offline');
var expBackoff = retryCount => Math.pow(2, retryCount) * 100;
var CONNECTING = {
  type: 'connecting'
};
exports.CONNECTING = CONNECTING;
var _observableCallback = (0, _observableCallback3.observableCallback)(),
  _observableCallback2 = _slicedToArray(_observableCallback, 2),
  onRetry$ = _observableCallback2[0],
  onRetry = _observableCallback2[1];
exports.onRetry = onRetry;
var createErrorStatus = _ref => {
  var error = _ref.error,
    isOffline = _ref.isOffline,
    attemptNo = _ref.attemptNo,
    retryAt = _ref.retryAt;
  return {
    type: 'error',
    error,
    attemptNo,
    isOffline,
    retryAt
  };
};
var connectionStatus$ = (0, _rxjs.defer)(() => (0, _rxjs.merge)((0, _bifur.getBifur)().heartbeats, onOffline$.pipe((0, _operators.mergeMapTo)((0, _rxjs.throwError)(new Error('The browser went offline')))))).pipe((0, _operators.map)(ts => ({
  type: 'connected',
  lastHeartbeat: ts
})), (0, _catchWithCount.catchWithCount)((error, successiveErrorsCount, caught) => {
  var timeUntilRetry = Math.min(1000 * 240, expBackoff(successiveErrorsCount));
  var retryAt = new Date(new Date().getTime() + timeUntilRetry);
  var expiry$ = (0, _rxjs.timer)(retryAt);
  var isOffline = !navigator.onLine;
  var initialErrorStatus = createErrorStatus({
    error,
    retryAt,
    isOffline,
    attemptNo: successiveErrorsCount
  });
  var triggerRetry$ = _rxjs.NEVER.pipe((0, _operators.takeUntil)(isOffline ? onOnline$ : (0, _rxjs.merge)(expiry$, onOnline$, onRetry$)));
  return (0, _rxjs.concat)((0, _rxjs.of)(initialErrorStatus), triggerRetry$.pipe((0, _operators.take)(1)), caught);
}), (0, _operators.startWith)(CONNECTING));
exports.connectionStatus$ = connectionStatus$;