"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeFieldWrapper = void 0;
var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));
var _react = _interopRequireWildcard(require("react"));
var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));
var _tracker = require("./tracker");
var _ConnectorContext = require("./ConnectorContext");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * This is used to draw the bar that wraps the diff components in the changes panel
 */
var ChangeFieldWrapper = props => {
  var ref = _react.default.useRef(null);
  var _React$useContext = _react.default.useContext(_ConnectorContext.ConnectorContext),
    onSetFocus = _React$useContext.onSetFocus;
  var _React$useState = _react.default.useState(false),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    isHover = _React$useState2[0],
    setHover = _React$useState2[1];
  var onMouseEnter = _react.default.useCallback(() => {
    setHover(true);
  }, []);
  var onMouseLeave = _react.default.useCallback(() => {
    setHover(false);
  }, []);
  (0, _tracker.useReporter)("change-".concat(PathUtils.toString(props.path)), () => ({
    element: ref.current,
    path: props.path,
    isChanged: true,
    hasFocus: false,
    hasHover: isHover,
    hasRevertHover: props.hasHover
  }),
  // note: deepCompare should be ok here since we're not comparing deep values
  _reactFastCompare.default);
  var handleClick = (0, _react.useCallback)(event => {
    setFocusWithStopPropagation(event, onSetFocus, props.path);
  }, [onSetFocus, props.path]);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    onClick: handleClick,
    onMouseLeave: onMouseLeave,
    onMouseEnter: onMouseEnter
  }, props.children);
};

// Stop the propagation here, or it will trigger the parent diff component's onClick.
exports.ChangeFieldWrapper = ChangeFieldWrapper;
function setFocusWithStopPropagation(event, onSetFocus, path) {
  event.stopPropagation();
  onSetFocus(path);
}