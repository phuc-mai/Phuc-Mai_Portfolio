"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ChangeConnectorStory;
var _ui = require("@sanity/ui");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _components = require("../../components");
var _ChangeFieldWrapper = require("../ChangeFieldWrapper");
var _ChangeIndicator = require("../ChangeIndicator");
var _ChangeConnectorRoot = require("../overlay/ChangeConnectorRoot");
var _templateObject, _templateObject2;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var TestContainer = (0, _styledComponents.default)(_ui.Container).attrs({
  height: 'fill',
  width: 1
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-height: 320px;\n"])));
var Root = (0, _styledComponents.default)(_ChangeConnectorRoot.ChangeConnectorRoot)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  outline: 1px solid var(--card-border-color);\n  position: relative;\n"])));
function ChangeConnectorStory() {
  var isReviewChangesOpen = true;
  var onOpenReviewChanges = (0, _react.useCallback)(() => undefined, []);
  var onSetFocus = (0, _react.useCallback)(() => undefined, []);
  var _useState = (0, _react.useState)([]),
    _useState2 = _slicedToArray(_useState, 2),
    focusPath = _useState2[0],
    setFocusPath = _useState2[1];
  return /*#__PURE__*/_react.default.createElement(_ui.LayerProvider, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    height: "fill",
    tone: "transparent"
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    height: "fill",
    justify: "center",
    padding: 4,
    sizing: "border"
  }, /*#__PURE__*/_react.default.createElement(TestContainer, null, /*#__PURE__*/_react.default.createElement(Root, {
    isReviewChangesOpen: isReviewChangesOpen,
    onOpenReviewChanges: onOpenReviewChanges,
    onSetFocus: onSetFocus
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    height: "fill"
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: _components.ScrollContainer,
    "data-ui": "ScrollContainer",
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 9
  }, /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['a'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "A",
    compareValue: "B"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field A")), /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['b'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "B",
    compareValue: "C"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field B")), /*#__PURE__*/_react.default.createElement(DebugFormField, {
    path: ['c'],
    focusPath: focusPath,
    setFocusPath: setFocusPath,
    value: "C",
    compareValue: "D"
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Field C")))), /*#__PURE__*/_react.default.createElement(_ui.Card, {
    as: _components.ScrollContainer,
    "data-ui": "ScrollContainer",
    borderLeft: true,
    flex: 1,
    overflow: "auto",
    padding: 5,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    flex: 1,
    space: 9
  }, /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['a']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff A")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['b']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff B")), /*#__PURE__*/_react.default.createElement(DebugDiffField, {
    path: ['c']
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "Diff C"))))))))));
}
function DebugFormField(props) {
  var children = props.children,
    focusPath = props.focusPath,
    path = props.path,
    value = props.value,
    compareValue = props.compareValue,
    setFocusPath = props.setFocusPath;
  var handleBlur = (0, _react.useCallback)(() => setFocusPath([]), [setFocusPath]);
  var handleFocus = (0, _react.useCallback)(() => setFocusPath(path), [path, setFocusPath]);
  return /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorProvider, {
    path: path,
    focusPath: focusPath,
    compareValue: compareValue,
    value: value
  }, /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicator, null, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    border: true,
    onBlur: handleBlur,
    onFocus: handleFocus,
    padding: 3,
    radius: 1,
    tabIndex: 0
  }, children)));
}
function DebugDiffField(props) {
  var children = props.children,
    path = props.path;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = _slicedToArray(_useState3, 2),
    hovered = _useState4[0],
    setHovered = _useState4[1];
  var handleMouseEnter = (0, _react.useCallback)(() => setHovered(true), []);
  var handleMouseLeave = (0, _react.useCallback)(() => setHovered(false), []);
  return /*#__PURE__*/_react.default.createElement(_ChangeFieldWrapper.ChangeFieldWrapper, {
    hasHover: hovered,
    path: path
  }, /*#__PURE__*/_react.default.createElement(_ui.Card, {
    borderLeft: true,
    padding: 3,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, children));
}