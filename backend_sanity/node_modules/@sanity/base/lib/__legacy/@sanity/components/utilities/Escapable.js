"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function createListener(eventName) {
  var listeners = [];
  return listen;
  function notify(event) {
    listeners.forEach(l => l(event));
  }
  function unlisten(listener) {
    listeners = listeners.filter(l => l !== listener);
    if (listeners.length === 0) {
      document.removeEventListener(eventName, notify);
    }
  }
  function listen(listener) {
    if (listeners.length === 0) {
      document.addEventListener(eventName, notify);
    }
    listeners.push(listener);
    return () => unlisten(listener);
  }
}
var onKeypress = createListener('keydown');

// @todo: refactor to functional component
class Escapable extends _react.default.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "removeListener", void 0);
    _defineProperty(this, "handleKeyPress", event => {
      if (this.props.onEscape && event.key === 'Escape') {
        this.props.onEscape(event);
      }
    });
  }
  // eslint-disable-next-line camelcase
  UNSAFE_componentWillMount() {
    this.removeListener = onKeypress(this.handleKeyPress);
  }
  componentWillUnmount() {
    if (this.removeListener) this.removeListener();
  }
  render() {
    return this.props.children || null;
  }
}
exports.default = Escapable;