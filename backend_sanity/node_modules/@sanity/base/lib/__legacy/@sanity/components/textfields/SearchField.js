"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));
var _react = _interopRequireDefault(require("react"));
var _searchStyle = _interopRequireDefault(require("part:@sanity/components/textfields/search-style"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// @todo: refactor to functional component
class SearchFieldField extends _react.default.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_inputId", (0, _uniqueId2.default)('searchfield'));
    _defineProperty(this, "handleKeyPress", event => {
      if (this.props.onKeyPress) {
        this.props.onKeyPress(event);
      }
    });
  }
  render() {
    var _this$props = this.props,
      label = _this$props.label,
      placeholder = _this$props.placeholder,
      _this$props$value = _this$props.value,
      value = _this$props$value === void 0 ? '' : _this$props$value,
      onChange = _this$props.onChange,
      onFocus = _this$props.onFocus,
      onBlur = _this$props.onBlur,
      onKeyPress = _this$props.onKeyPress;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _searchStyle.default.root
    }, label && /*#__PURE__*/_react.default.createElement("label", {
      htmlFor: this._inputId,
      className: _searchStyle.default.label
    }, label), /*#__PURE__*/_react.default.createElement("input", {
      className: _searchStyle.default.input,
      id: this._inputId,
      type: "search",
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      value: value,
      placeholder: placeholder,
      onKeyPress: onKeyPress
    }));
  }
}
exports.default = SearchFieldField;