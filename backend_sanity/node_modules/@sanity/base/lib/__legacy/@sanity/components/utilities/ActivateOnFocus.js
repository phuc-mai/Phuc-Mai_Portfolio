"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireDefault(require("react"));
var _reactClickOutside = _interopRequireDefault(require("react-click-outside"));
var _ActivateOnFocus = _interopRequireDefault(require("./ActivateOnFocus.css"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// @todo: refactor to functional component
class ActivateOnFocus extends _react.default.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      hasFocus: false
    });
    _defineProperty(this, "handleClick", () => {
      if (!this.state.hasFocus) {
        this.setState({
          hasFocus: true
        });
        var onActivate = this.props.onActivate;
        if (onActivate) {
          onActivate();
        }
      }
    });
    _defineProperty(this, "handleClickOutside", () => {
      if (this.state.hasFocus) {
        this.setState({
          hasFocus: false
        });
      }
    });
  }
  render() {
    var _this$props = this.props,
      classNameProp = _this$props.className,
      message = _this$props.message,
      children = _this$props.children,
      isActive = _this$props.isActive,
      html = _this$props.html,
      overlayClassNameProp = _this$props.overlayClassName,
      inputId = _this$props.inputId;
    var hasFocus = this.state.hasFocus;
    var className = (0, _classnames.default)(hasFocus ? _ActivateOnFocus.default.hasFocus : _ActivateOnFocus.default.noFocus, classNameProp);
    var overlayClassName = (0, _classnames.default)(_ActivateOnFocus.default.overlay, overlayClassNameProp);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: className,
      id: inputId
    }, !isActive && /*#__PURE__*/_react.default.createElement("div", {
      className: _ActivateOnFocus.default.eventHandler,
      onClick: this.handleClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: overlayClassName
    }, !html && /*#__PURE__*/_react.default.createElement("div", {
      className: _ActivateOnFocus.default.stringMessage
    }, message), html && /*#__PURE__*/_react.default.createElement("div", {
      className: _ActivateOnFocus.default.html
    }, html))), /*#__PURE__*/_react.default.createElement("div", {
      className: _ActivateOnFocus.default.content
    }, children));
  }
}
_defineProperty(ActivateOnFocus, "defaultProps", {
  className: undefined,
  message: 'Click to activateâ€¦',
  isActive: false
});
var _default = (0, _reactClickOutside.default)(ActivateOnFocus);
exports.default = _default;