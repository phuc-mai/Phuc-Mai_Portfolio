"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GetHookCollectionState = GetHookCollectionState;
var _throttle2 = _interopRequireDefault(require("lodash/throttle"));
var _react = _interopRequireDefault(require("react"));
var _HookStateContainer = require("./HookStateContainer");
var _requestIdleCallback = require("./requestIdleCallback");
var _excluded = ["hooks", "args", "component", "onReset"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var actionIds = new WeakMap();
var counter = 0;
var getHookId = action => {
  if (actionIds.has(action)) {
    return actionIds.get(action);
  }
  var id = "".concat(action.name || action.displayName || '<anonymous>', "-").concat(counter++);
  actionIds.set(action, id);
  return id;
};
function useThrottled(callback, wait, options) {
  var throttled = _react.default.useCallback((0, _throttle2.default)(callback, wait, options), [callback]);
  _react.default.useEffect(() => () => {
    throttled.flush();
  }, []);
  return throttled;
}
function GetHookCollectionState(props) {
  var hooks = props.hooks,
    args = props.args,
    Component = props.component,
    propsOnReset = props.onReset,
    rest = _objectWithoutProperties(props, _excluded);
  var statesRef = _react.default.useRef({});
  var _React$useState = _react.default.useState(0),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    setTick = _React$useState2[1];
  var _React$useState3 = _react.default.useState({}),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    keys = _React$useState4[0],
    setKeys = _React$useState4[1];
  var mountedRef = _react.default.useRef(true);
  _react.default.useEffect(() => {
    return () => {
      mountedRef.current = false;
    };
  }, []);
  var ricHandle = _react.default.useRef(null);
  var onRequestUpdate = useThrottled(() => {
    if (ricHandle.current) {
      (0, _requestIdleCallback.cancelIdleCallback)(ricHandle.current);
    }
    ricHandle.current = (0, _requestIdleCallback.requestIdleCallback)(() => {
      ricHandle.current = null;
      if (mountedRef.current) {
        setTick(tick => tick + 1);
      }
    });
  }, 60, {
    trailing: true
  });
  var onNext = _react.default.useCallback((id, hookState) => {
    if (hookState === null) {
      delete statesRef.current[id];
    } else {
      var current = statesRef.current[id];
      statesRef.current[id] = _objectSpread(_objectSpread({}, current), {}, {
        value: hookState
      });
    }
  }, []);
  var onReset = _react.default.useCallback(id => {
    setKeys(currentKeys => _objectSpread(_objectSpread({}, currentKeys), {}, {
      [id]: (currentKeys[id] || 0) + 1
    }));
    if (propsOnReset) {
      propsOnReset();
    }
  }, []);
  var hookIds = hooks.map(hook => getHookId(hook));
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, hooks.map(hook => {
    var id = getHookId(hook);
    var key = keys[id] || 0;
    return /*#__PURE__*/_react.default.createElement(_HookStateContainer.HookStateContainer, {
      key: "".concat(id, "-").concat(key),
      hook: hook,
      id: id,
      args: args,
      onNext: onNext,
      onRequestUpdate: onRequestUpdate,
      onReset: onReset
    });
  }), /*#__PURE__*/_react.default.createElement(Component, _extends({}, rest, {
    states: hookIds.map(id => {
      var _statesRef$current$id;
      return (_statesRef$current$id = statesRef.current[id]) === null || _statesRef$current$id === void 0 ? void 0 : _statesRef$current$id.value;
    }).filter(Boolean)
  })));
}