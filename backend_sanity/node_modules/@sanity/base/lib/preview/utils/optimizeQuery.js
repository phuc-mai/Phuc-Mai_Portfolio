"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineSelections = combineSelections;
exports.reassemble = reassemble;
exports.toQuery = toQuery;
var _values2 = _interopRequireDefault(require("lodash/values"));
var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));
var _identity2 = _interopRequireDefault(require("lodash/identity"));
var _searchUtils = require("../../util/searchUtils");
var _constants = require("../constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function combineSelections(selections) {
  return (0, _values2.default)(selections.reduce((output, _ref, index) => {
    var _ref2 = _slicedToArray(_ref, 2),
      id = _ref2[0],
      fields = _ref2[1];
    var key = (0, _sortBy2.default)(fields.join(','), _identity2.default).join('.');
    if (!output[key]) {
      output[key] = {
        fields: fields,
        ids: [],
        map: []
      };
    }
    var idx = output[key].ids.length;
    output[key].ids[idx] = id;
    output[key].map[idx] = index;
    return output;
  }, {}));
}
function stringifyId(id) {
  return JSON.stringify(id);
}
var maybeEscape = fieldName => (0, _searchUtils.fieldNeedsEscape)(fieldName) ? "\"".concat(fieldName, "\": @").concat((0, _searchUtils.escapeField)(fieldName)) : fieldName;
function toSubQuery(_ref3) {
  var ids = _ref3.ids,
    fields = _ref3.fields;
  var allFields = [..._constants.INCLUDE_FIELDS_QUERY, ...fields];
  return "*[_id in [".concat(ids.map(stringifyId).join(','), "]][0...").concat(ids.length, "]{").concat(allFields.map(maybeEscape).join(','), "}");
}
function toQuery(combinedSelections) {
  return "[".concat(combinedSelections.map(toSubQuery).join(','), "][0...").concat(combinedSelections.length, "]");
}
function reassemble(queryResult, combinedSelections) {
  return queryResult.reduce((reprojected, subResult, index) => {
    var map = combinedSelections[index].map;
    map.forEach((resultIdx, i) => {
      var id = combinedSelections[index].ids[i];
      var found = subResult.find(doc => doc._id === id);
      reprojected[resultIdx] = found || null;
    });
    return reprojected;
  }, []);
}