"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observePathsDocumentPair = observePathsDocumentPair;
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _draftUtils = require("../util/draftUtils");
var _availability = require("./availability");
var _ = require("./");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var ALWAYS_INCLUDED_SNAPSHOT_PATHS = [['_updatedAt'], ['_createdAt'], ['_type']];
function observePathsDocumentPair(id, paths) {
  var _getIdPair = (0, _draftUtils.getIdPair)(id),
    draftId = _getIdPair.draftId,
    publishedId = _getIdPair.publishedId;
  return (0, _availability.observeDocumentPairAvailability)(id).pipe((0, _operators.switchMap)(availability => {
    if (!availability.draft.available && !availability.published.available) {
      // short circuit, neither draft nor published is available so no point in trying to get a snapshot
      return (0, _rxjs.of)({
        id,
        type: null,
        draft: {
          availability: availability.draft,
          snapshot: undefined
        },
        published: {
          availability: availability.published,
          snapshot: undefined
        }
      });
    }
    var snapshotPaths = [...paths, ...ALWAYS_INCLUDED_SNAPSHOT_PATHS];
    return (0, _rxjs.combineLatest)([(0, _.observePaths)(draftId, snapshotPaths), (0, _.observePaths)(publishedId, snapshotPaths)]).pipe((0, _operators.map)(_ref => {
      var _ref2 = _slicedToArray(_ref, 2),
        draftSnapshot = _ref2[0],
        publishedSnapshot = _ref2[1];
      // note: assume type is always the same
      var type = (draftSnapshot === null || draftSnapshot === void 0 ? void 0 : draftSnapshot._type) || (publishedSnapshot === null || publishedSnapshot === void 0 ? void 0 : publishedSnapshot._type) || null;
      return {
        id: publishedId,
        type,
        draft: {
          availability: availability.draft,
          snapshot: draftSnapshot
        },
        published: {
          availability: availability.published,
          snapshot: publishedSnapshot
        }
      };
    }));
  }));
}