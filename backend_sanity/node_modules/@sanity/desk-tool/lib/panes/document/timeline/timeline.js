"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeline = void 0;
var _react = _interopRequireWildcard(require("react"));
var _ui = require("@sanity/ui");
var _timelineItem = require("./timelineItem");
var _timeline = require("./timeline.styled");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
// Must be a positive number
var LOAD_MORE_OFFSET = 20;
var Timeline = _ref => {
  var timeline = _ref.timeline,
    disabledBeforeSelection = _ref.disabledBeforeSelection,
    topSelection = _ref.topSelection,
    bottomSelection = _ref.bottomSelection,
    onSelect = _ref.onSelect,
    onLoadMore = _ref.onLoadMore;
  var rootRef = (0, _react.useRef)(null);
  var listRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(null),
    _useState2 = _slicedToArray(_useState, 2),
    loadingElement = _useState2[0],
    setLoadingElement = _useState2[1];
  var state = disabledBeforeSelection ? 'disabled' : 'enabled';
  var checkIfLoadIsNeeded = (0, _react.useCallback)(() => {
    var rootEl = rootRef.current;
    if (loadingElement && rootEl) {
      var offsetHeight = rootEl.offsetHeight,
        scrollTop = rootEl.scrollTop;
      var bottomPosition = offsetHeight + scrollTop + LOAD_MORE_OFFSET;
      var isVisible = loadingElement.offsetTop < bottomPosition;
      if (isVisible) {
        // @todo: find out why, for some reason, it won't load without RAF wrapper
        requestAnimationFrame(() => onLoadMore(isVisible));
      }
    }
  }, [onLoadMore, loadingElement]);

  // Load whenever it's needed
  (0, _react.useEffect)(checkIfLoadIsNeeded, [checkIfLoadIsNeeded]);
  return /*#__PURE__*/_react.default.createElement(_timeline.Root, {
    ref: rootRef,
    onScroll: checkIfLoadIsNeeded,
    "data-ui": "timeline"
  }, timeline.chunkCount === 0 && /*#__PURE__*/_react.default.createElement(_timeline.StackWrapper, {
    padding: 3,
    space: 3
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    weight: "semibold"
  }, "No document history"), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    muted: true,
    size: 1
  }, "When changing the content of the document, the document versions will appear in this menu.")), timeline.chunkCount > 0 && /*#__PURE__*/_react.default.createElement(_timeline.MenuWrapper, {
    ref: listRef,
    padding: 1,
    space: 0
  }, timeline.mapChunks(chunk => {
    var isSelectionTop = topSelection === chunk;
    var isSelectionBottom = bottomSelection === chunk;
    if (isSelectionTop) {
      state = 'withinSelection';
    }
    if (isSelectionBottom) {
      state = 'selected';
    }
    var item = /*#__PURE__*/_react.default.createElement(_timelineItem.TimelineItem, {
      chunk: chunk,
      isSelectionBottom: isSelectionBottom,
      isSelectionTop: isSelectionTop,
      key: chunk.id,
      state: state,
      onSelect: onSelect,
      type: chunk.type,
      timestamp: chunk.endTimestamp
    });

    // Flip it back to normal after we've rendered the active one.
    if (state === 'selected') {
      state = 'enabled';
    }
    return item;
  })), !timeline.reachedEarliestEntry && /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4,
    ref: setLoadingElement
  }, /*#__PURE__*/_react.default.createElement(_ui.Spinner, {
    muted: true
  })));
};
exports.Timeline = Timeline;
Timeline.displayName = 'Timeline';