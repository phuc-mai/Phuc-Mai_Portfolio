"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentListPane = void 0;
var _react = _interopRequireWildcard(require("react"));
var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));
var _pane = require("../../components/pane");
var _useShallowUnique = require("../../utils/useShallowUnique");
var _useUnique = require("../../utils/useUnique");
var _settings = require("../../settings");
var _constants = require("./constants");
var _helpers = require("./helpers");
var _DocumentListPaneContent = require("./DocumentListPaneContent");
var _DocumentListPaneHeader = require("./DocumentListPaneHeader");
var _useDocumentList2 = require("./useDocumentList");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var emptyArray = [];

/**
 * @internal
 */
var DocumentListPane = /*#__PURE__*/(0, _react.memo)(function DocumentListPane(props) {
  var childItemId = props.childItemId,
    index = props.index,
    isActive = props.isActive,
    isSelected = props.isSelected,
    pane = props.pane,
    paneKey = props.paneKey;
  var _pane$defaultLayout = pane.defaultLayout,
    defaultLayout = _pane$defaultLayout === void 0 ? 'default' : _pane$defaultLayout,
    displayOptions = pane.displayOptions,
    _pane$initialValueTem = pane.initialValueTemplates,
    initialValueTemplates = _pane$initialValueTem === void 0 ? emptyArray : _pane$initialValueTem,
    menuItems = pane.menuItems,
    menuItemGroups = pane.menuItemGroups,
    options = pane.options,
    title = pane.title;
  var _options$defaultOrder = options.defaultOrdering,
    defaultOrdering = _options$defaultOrder === void 0 ? emptyArray : _options$defaultOrder,
    filter = options.filter,
    apiVersion = options.apiVersion;
  var params = (0, _useShallowUnique.useShallowUnique)(options.params || _constants.EMPTY_RECORD);
  var typeName = (0, _react.useMemo)(() => (0, _helpers.getTypeNameFromSingleTypeFilter)(filter, params), [filter, params]);
  var showIcons = (displayOptions === null || displayOptions === void 0 ? void 0 : displayOptions.showIcons) !== false;
  var _useDeskToolSetting = (0, _settings.useDeskToolSetting)(typeName, 'layout', defaultLayout),
    _useDeskToolSetting2 = _slicedToArray(_useDeskToolSetting, 2),
    layout = _useDeskToolSetting2[0],
    setLayout = _useDeskToolSetting2[1];
  var defaultOrderingBy = (0, _react.useMemo)(() => ({
    by: defaultOrdering
  }), [defaultOrdering]);
  var _useDeskToolSetting3 = (0, _settings.useDeskToolSetting)(typeName, 'sortOrder', defaultOrderingBy),
    _useDeskToolSetting4 = _slicedToArray(_useDeskToolSetting3, 2),
    sortOrderRaw = _useDeskToolSetting4[0],
    setSortOrder = _useDeskToolSetting4[1];
  var sortWithOrderingFn = typeName && sortOrderRaw ? (0, _helpers.applyOrderingFunctions)(sortOrderRaw, _schema.default.get(typeName)) : sortOrderRaw;
  var sortOrder = (0, _useUnique.useUnique)(sortWithOrderingFn);
  var filterIsSimpleTypeContraint = (0, _helpers.isSimpleTypeFilter)(filter);
  var _useDocumentList = (0, _useDocumentList2.useDocumentList)({
      filter,
      params,
      sortOrder,
      apiVersion
    }),
    error = _useDocumentList.error,
    fullList = _useDocumentList.fullList,
    handleListChange = _useDocumentList.handleListChange,
    isLoading = _useDocumentList.isLoading,
    items = _useDocumentList.items,
    onRetry = _useDocumentList.onRetry;
  return /*#__PURE__*/_react.default.createElement(_pane.Pane, {
    currentMaxWidth: 350,
    id: paneKey,
    maxWidth: 640,
    minWidth: 320,
    selected: isSelected
  }, /*#__PURE__*/_react.default.createElement(_DocumentListPaneHeader.DocumentListPaneHeader, {
    index: index,
    initialValueTemplates: initialValueTemplates,
    menuItems: menuItems,
    menuItemGroups: menuItemGroups,
    setLayout: setLayout,
    setSortOrder: setSortOrder,
    title: title
  }), /*#__PURE__*/_react.default.createElement(_DocumentListPaneContent.DocumentListPaneContent, {
    childItemId: childItemId,
    error: error,
    filterIsSimpleTypeContraint: filterIsSimpleTypeContraint,
    fullList: fullList,
    isActive: isActive,
    isLoading: isLoading,
    items: items,
    layout: layout,
    onListChange: handleListChange,
    onRetry: onRetry,
    showIcons: showIcons
  }));
});
exports.DocumentListPane = DocumentListPane;