"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deskToolSettings = void 0;
exports.useDeskToolSetting = useDeskToolSetting;
var _settings = _interopRequireDefault(require("part:@sanity/base/settings"));
var _react = require("react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
/**
 * @internal
 */
var deskToolSettings = _settings.default.forNamespace('desk-tool');

/**
 * @internal
 */
exports.deskToolSettings = deskToolSettings;
function useDeskToolSetting(namespace, key, defaultValue) {
  var _useState = (0, _react.useState)(defaultValue),
    _useState2 = _slicedToArray(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  var settingRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(() => {
    var settingsNamespace = deskToolSettings.forNamespace(namespace);
    settingRef.current = settingsNamespace.forKey(key);
    var sub = settingRef.current.listen(defaultValue).subscribe(setValue);
    return () => sub.unsubscribe();
  }, [defaultValue, key, namespace]);
  var set = (0, _react.useCallback)(newValue => {
    var _settingRef$current;
    setValue(newValue);
    (_settingRef$current = settingRef.current) === null || _settingRef$current === void 0 ? void 0 : _settingRef$current.set(newValue);
  }, []);
  return (0, _react.useMemo)(() => [value, set], [set, value]);
}