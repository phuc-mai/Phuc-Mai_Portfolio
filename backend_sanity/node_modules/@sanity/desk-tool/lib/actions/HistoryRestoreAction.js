"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HistoryRestoreAction = void 0;
var _reactHooks = require("@sanity/react-hooks");
var _router = require("@sanity/base/router");
var _icons = require("@sanity/icons");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var HistoryRestoreAction = _ref => {
  var id = _ref.id,
    type = _ref.type,
    revision = _ref.revision,
    onComplete = _ref.onComplete;
  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(id, type),
    restore = _useDocumentOperation.restore;
  var router = (0, _router.useRouter)();
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isConfirmDialogOpen = _useState2[0],
    setConfirmDialogOpen = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = _slicedToArray(_useState3, 2),
    error = _useState4[0],
    setError = _useState4[1];
  var handleConfirm = (0, _react.useCallback)(() => {
    restore.execute(revision);
    router.navigateIntent('edit', {
      id,
      type
    });
    onComplete();
  }, [revision, restore, router, onComplete, id, type]);
  var handle = (0, _react.useCallback)(() => {
    setConfirmDialogOpen(true);
  }, []);
  var dialog = (0, _react.useMemo)(() => {
    if (!error && isConfirmDialogOpen) {
      return {
        type: 'confirm',
        color: 'danger',
        onCancel: onComplete,
        onConfirm: handleConfirm,
        message: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Are you sure you want to restore this document?")
      };
    }
    if (!error) {
      return null;
    }
    return {
      type: 'error',
      onClose: () => setError(null),
      title: 'An error occurred',
      content: error.message
    };
  }, [error, handleConfirm, isConfirmDialogOpen, onComplete]);
  var isRevisionInitialVersion = revision === '@initial';
  return {
    label: 'Restore',
    color: 'primary',
    onHandle: handle,
    title: isRevisionInitialVersion ? "You can't restore to the initial version" : 'Restore to this version',
    icon: _icons.RestoreIcon,
    dialog,
    disabled: isRevisionInitialVersion
  };
};
exports.HistoryRestoreAction = HistoryRestoreAction;