"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Based heavily on https://github.com/webpack/webpack/blob/
 *  c0afdf9c6abc1dd70707c594e473802a566f7b6e/hot/only-dev-server.js
 * Original copyright Tobias Koppers @sokra (MIT license)
 */

/* eslint-disable complexity, no-console, camelcase, no-case-declarations, max-depth, @typescript-eslint/camelcase */
/* global __webpack_hash__ */

if (!module.hot) {
  throw new Error('[HMR] Hot Module Replacement is disabled.');
}
var lastHash;
var failureStatuses = {
  abort: 1,
  fail: 1
};
var applyOptions = {
  ignoreUnaccepted: true,
  ignoreDeclined: true,
  ignoreErrored: true,
  onUnaccepted(data) {
    console.warn("Ignored an update to unaccepted module ".concat(data.chain.join(' -> ')));
  },
  onDeclined(data) {
    console.warn("Ignored an update to declined module ".concat(data.chain.join(' -> ')));
  },
  onErrored(data) {
    console.warn("Ignored an error while updating module ".concat(data.moduleId, " (").concat(data.type, "): ").concat(data.error.message));
  }
};
function isUpToDate(hash) {
  if (hash) {
    lastHash = hash;
  }
  return lastHash === __webpack_hash__;
}
module.exports = function processUpdate(hash, moduleMap) {
  var callbacks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!isUpToDate(hash) && module.hot.status() === 'idle') {
    callbacks.handleCheckUpdate();
    check();
  }
  function check() {
    var cb = (err, updatedModules) => {
      if (err) {
        return handleError(err);
      }
      if (!updatedModules) {
        callbacks.handleUpdateNotFound();
        return null;
      }
      var applyCallback = (applyErr, renewedModules) => {
        if (applyErr) {
          handleError(applyErr);
          return;
        }
        if (!isUpToDate()) {
          check();
        }
        logUpdates(updatedModules, renewedModules);
        triggerCallbacks(updatedModules, renewedModules);
      };
      var options = _objectSpread(_objectSpread({}, applyOptions), {}, {
        onErrored: function onErrored() {
          applyOptions.onErrored(...arguments);
          callbacks.handleError(...arguments);
        },
        onDeclined: function onDeclined() {
          applyOptions.onDeclined(...arguments);
          callbacks.handleError(...arguments);
        },
        onUnaccepted: function onUnaccepted() {
          applyOptions.onUnaccepted(...arguments);
          callbacks.handleUnaccepted(...arguments);
        }
      });
      var applyResult = module.hot.apply(options, applyCallback);
      // webpack 2 promise
      if (applyResult && applyResult.then) {
        // HotModuleReplacement.runtime.js refers to the result as `outdatedModules`
        applyResult.then(outdatedModules => applyCallback(null, outdatedModules));
        applyResult.catch(applyCallback);
      }
      return undefined;
    };
    var result = module.hot.check(false, cb);
    // webpack 2 promise
    if (result && result.then) {
      result.then(updatedModules => cb(null, updatedModules));
      result.catch(cb);
    }
  }
  function logUpdates(updatedModules, renewedModules) {
    var unacceptedModules = updatedModules.filter(moduleId => renewedModules && renewedModules.indexOf(moduleId) < 0);
    if (unacceptedModules.length > 0) {
      console.warn("[HMR] The following modules couldn't be hot updated: " + '(Full reload needed)\n' + 'This is usually because the modules which have changed ' + '(and their parents) do not know how to hot reload themselves. ');
      unacceptedModules.forEach(moduleId => {
        console.warn("[HMR]  - ".concat(normalizeModulePath(moduleMap[moduleId] || moduleId).path));
      });
      return;
    }
    if (!renewedModules || renewedModules.length === 0) {
      console.log('[HMR] Nothing hot updated.');
    } else {
      console.log('[HMR] Updated modules:');
      renewedModules.forEach(moduleId => {
        console.log("[HMR]  - ".concat(normalizeModulePath(moduleMap[moduleId] || moduleId).path));
      });
    }
    if (isUpToDate()) {
      console.log('[HMR] App is up to date.');
    }
  }
  function triggerCallbacks(updatedModules, renewedModules) {
    var unacceptedModules = updatedModules.filter(moduleId => renewedModules && renewedModules.indexOf(moduleId) < 0);
    if (unacceptedModules.length > 0) {
      callbacks.handleUnaccepted({
        modules: unacceptedModules.map(moduleId => normalizeModulePath(moduleMap[moduleId] || moduleId))
      });
      return;
    }
    if (!renewedModules || renewedModules.length === 0) {
      callbacks.handleNothingUpdated();
    } else {
      callbacks.handleUpdated({
        modules: renewedModules.map(moduleId => normalizeModulePath(moduleMap[moduleId] || moduleId))
      });
    }
    if (isUpToDate()) {
      callbacks.handleUpToDate();
    }
  }
  function handleError(err) {
    if (module.hot.status() in failureStatuses) {
      callbacks.handleError({
        error: err
      });
      return;
    }
    callbacks.handleUpdateCheckFailed({
      error: err
    });
  }
  function normalizeModulePath(pathName) {
    if (typeof pathName !== 'string') {
      return {
        path: '<unknown>'
      };
    }
    var _pathName$split = pathName.split('?sanityPart='),
      _pathName$split2 = _slicedToArray(_pathName$split, 2),
      path = _pathName$split2[0],
      partName = _pathName$split2[1];
    return {
      path,
      partName: partName && decodeURIComponent(partName)
    };
  }
};