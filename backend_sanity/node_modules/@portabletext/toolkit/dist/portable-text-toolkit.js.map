{"version":3,"file":"portable-text-toolkit.js","sources":["../src/asserters.ts","../src/sortMarksByOccurences.ts","../src/nestLists.ts","../src/toPlainText.ts","../src/types.ts","../src/buildMarksTree.ts","../src/spanToPlainText.ts"],"sourcesContent":["import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param block - Block to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param span - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param node - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n","import type {PortableTextSpan, TypedObject} from '@portabletext/types'\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[]\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n","import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct'\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html'\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html'\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n","import type {ArbitraryTypedObject, PortableTextBlock} from '@portabletext/types'\nimport {isPortableTextBlock, isPortableTextSpan} from './asserters'\n\nconst leadingSpace = /^\\s/\nconst trailingSpace = /^\\s/\n\n/**\n * Takes a Portable Text block (or an array of them) and returns the text value\n * of all the Portable Text span nodes. Adds whitespace when encountering inline,\n * non-span nodes to ensure text flow is optimal.\n *\n * Note that this only accounts for regular Portable Text blocks - any text inside\n * custom content types are not included in the output.\n *\n * @param block - Single block or an array of blocks to extract text from\n * @returns The plain-text content of the blocks\n */\nexport function toPlainText(\n  block: PortableTextBlock | ArbitraryTypedObject[] | PortableTextBlock[]\n): string {\n  const blocks = Array.isArray(block) ? block : [block]\n  let text = ''\n\n  blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) {\n      return\n    }\n\n    let pad = false\n    current.children.forEach((span) => {\n      if (isPortableTextSpan(span)) {\n        // If the previous element was a non-span, and we have no natural whitespace\n        // between the previous and the next span, insert it to give the spans some\n        // room to breathe. However, don't do so if this is the first span.\n        text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? ' ' : ''\n        text += span.text\n        pad = false\n      } else {\n        pad = true\n      }\n    })\n\n    if (index !== blocks.length - 1) {\n      text += '\\n\\n'\n    }\n  })\n\n  return text\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n} from '@portabletext/types'\n\n/**\n * List nesting mode for HTML, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_HTML = 'html'\n\n/**\n * List nesting mode for direct, nested lists, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_DIRECT = 'direct'\n\n/**\n * List nesting mode, see the {@link nestLists | `nestLists()` function}\n */\nexport type ToolkitListNestMode = 'html' | 'direct'\n\n/**\n * Toolkit-specific type representing a nested list\n *\n * See the `nestLists()` function for more info\n */\nexport type ToolkitPortableTextList = ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList\n\n/**\n * Toolkit-specific type representing a nested list in HTML mode, where deeper lists are nested\n * inside of the _list items_, eg `<ul><li>Some text<ul><li>Deeper</li></ul></li></ul>`\n */\nexport interface ToolkitPortableTextHtmlList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes will appear as children of the _list items_\n   */\n  mode: 'html'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - toolkit-specific list items which can themselves hold deeper lists\n   */\n  children: ToolkitPortableTextListItem[]\n}\n\n/**\n * Toolkit-specific type representing a nested list in \"direct\" mode, where deeper lists are nested\n * inside of the lists children, alongside other blocks.\n */\nexport interface ToolkitPortableTextDirectList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes can appear as direct children\n   */\n  mode: 'direct'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - either portable text list items, or another, deeper list\n   */\n  children: (PortableTextListItemBlock | ToolkitPortableTextDirectList)[]\n}\n\n/**\n * Toolkit-specific type representing a list item block, but where the children can be another list\n */\nexport interface ToolkitPortableTextListItem\n  extends PortableTextListItemBlock<\n    PortableTextMarkDefinition,\n    PortableTextSpan | ToolkitPortableTextList\n  > {}\n\n/**\n * Toolkit-specific type representing a text node, used when nesting spans.\n *\n * See the {@link buildMarksTree | `buildMarksTree()` function}\n */\nexport interface ToolkitTextNode {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@text'\n\n  /**\n   * The actual string value of the text node\n   */\n  text: string\n}\n\n/**\n * Toolkit-specific type representing a portable text span that can hold other spans.\n * In this type, each span only has a single mark, instead of an array of them.\n */\nexport interface ToolkitNestedPortableTextSpan<\n  M extends PortableTextMarkDefinition = PortableTextMarkDefinition\n> {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@span'\n\n  /**\n   * Unique key for this span\n   */\n  _key?: string\n\n  /**\n   * Holds the value (definition) of the mark in the case of annotations.\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markDef?: M\n\n  /**\n   * The key of the mark definition (in the case of annotations).\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markKey?: string\n\n  /**\n   * Type of the mark. For annotations, this is the `_type` property of the value.\n   * For decorators, it will hold the name of the decorator (strong, em or similar).\n   */\n  markType: string\n\n  /**\n   * Child nodes of this span. Can be toolkit-specific text nodes, nested spans\n   * or any inline object type.\n   */\n  children: (\n    | ToolkitTextNode\n    | ToolkitNestedPortableTextSpan<PortableTextMarkDefinition>\n    | ArbitraryTypedObject\n  )[]\n}\n","import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children, markDefs = []} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text}))\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n","import type {ToolkitNestedPortableTextSpan} from './types'\nimport {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n"],"names":["isPortableTextSpan","node","_type","text","marks","Array","isArray","every","mark","isPortableTextBlock","markDefs","def","_key","children","child","isPortableTextListItemBlock","block","listItem","level","isPortableTextToolkitList","isPortableTextToolkitSpan","span","isPortableTextToolkitTextNode","knownDecorators","sortMarksByOccurences","index","blockChildren","length","slice","occurences","forEach","siblingIndex","sibling","indexOf","sort","markA","markB","aOccurences","bOccurences","aKnownPos","bKnownPos","localeCompare","sortMarks","blockMatchesList","list","listFromBlock","mode","findListMatching","rootNode","matching","style","filterOnType","leadingSpace","trailingSpace","_a","sortedMarks","map","markType","nodeStack","i","marksNeeded","pos","markKey","splice","currentNode","markDef","find","push","lines","split","line","concat","blocks","tree","currentList","newList","lastListItem","newLastChild","matchingBranch","match","console","warn","spanToPlainText","current","pad","test"],"mappings":"osBAeO,SAASA,EACdC,GAGE,MAAe,SAAfA,EAAKC,OACL,SAAUD,GACW,iBAAdA,EAAKE,YACW,IAAfF,EAAKG,OACVC,MAAMC,QAAQL,EAAKG,QAAUH,EAAKG,MAAMG,OAAOC,GAAyB,iBAATA,IAEtE,CAQO,SAASC,EACdR,GAEA,MAGwB,iBAAfA,EAAKC,OAEM,MAAlBD,EAAKC,MAAM,OAER,aAAcD,IACdI,MAAMC,QAAQL,EAAKS,WAElBT,EAAKS,SAASH,OAAOI,GAA4B,iBAAbA,EAAIC,SAE5C,aAAcX,GACdI,MAAMC,QAAQL,EAAKY,WAEnBZ,EAAKY,SAASN,OAAOO,GAA2B,iBAAVA,GAAsB,UAAWA,GAE3E,CAQO,SAASC,EACdC,GAEA,OACEP,EAAoBO,IACpB,aAAcA,GACY,iBAAnBA,EAAMC,gBACW,IAAhBD,EAAME,OAAgD,iBAAhBF,EAAME,MAExD,CASO,SAASC,EACdH,GAEA,MAAuB,UAAhBA,EAAMd,KACf,CASO,SAASkB,EACdC,GAEA,MAAsB,UAAfA,EAAKnB,KACd,CASO,SAASoB,EACdrB,GAEA,MAAsB,UAAfA,EAAKC,KACd,wDC1GA,MAAMqB,EAAkB,CAAC,SAAU,KAAM,OAAQ,YAAa,kBAuC9C,SAAAC,EACdH,EACAI,EACAC,GAEA,IAAK1B,EAAmBqB,KAAUA,EAAKjB,MACrC,MAAO,GAGL,IAACiB,EAAKjB,MAAMuB,OACd,MAAO,GAIH,MAAAvB,EAAQiB,EAAKjB,MAAMwB,QACnBC,EAAqC,CAAA,EAoBpC,OAnBDzB,EAAA0B,SAAStB,IACbqB,EAAWrB,GAAQ,EAEnB,IAAA,IAASuB,EAAeN,EAAQ,EAAGM,EAAeL,EAAcC,OAAQI,IAAgB,CACtF,MAAMC,EAAUN,EAAcK,GAE9B,KACEC,GACAhC,EAAmBgC,IACnB3B,MAAMC,QAAQ0B,EAAQ5B,SAEtB,IADA4B,EAAQ5B,MAAM6B,QAAQzB,IAItB,MAFWqB,EAAArB,IAIf,KAGKJ,EAAM8B,MAAK,CAACC,EAAOC,IAG5B,SACEP,EACAM,EACAC,GAEA,MAAMC,EAAcR,EAAWM,GACzBG,EAAcT,EAAWO,GAE/B,GAAIC,IAAgBC,EAClB,OAAOA,EAAcD,EAGjB,MAAAE,EAAYhB,EAAgBU,QAAQE,GACpCK,EAAYjB,EAAgBU,QAAQG,GAG1C,GAAIG,IAAcC,EAChB,OAAOD,EAAYC,EAId,OAAAL,EAAMM,cAAcL,EAC7B,CAzBsCM,CAAUb,EAAYM,EAAOC,IACnE,CCiFA,SAASO,EAAiB3B,EAA0B4B,GAClD,OAAQ5B,EAAME,OAAS,KAAO0B,EAAK1B,OAASF,EAAMC,WAAa2B,EAAK3B,QACtE,CAEA,SAAS4B,EACP7B,EACAS,EACAqB,GAEO,MAAA,CACL5C,MAAO,QACPU,eAASI,EAAMJ,MAAWa,GAAAA,OAAAA,GAAA,WAC1BqB,OACA5B,MAAOF,EAAME,OAAS,EACtBD,SAAUD,EAAMC,SAChBJ,SAAU,CAACG,GAEf,CAEA,SAAS+B,EACPC,EACAC,GAEM,MAAA/B,EAAQ+B,EAAS/B,OAAS,EAC1BgC,EAAQD,EAAShC,UAAY,SAC7BkC,EAA4C,iBAAtBF,EAAShC,SAEnC,GAAAE,EAA0B6B,KACzBA,EAAS9B,OAAS,KAAOA,GAC1BiC,IACCH,EAAS/B,UAAY,YAAciC,EAE7B,OAAAF,EAGL,KAAE,aAAcA,GACX,OAGT,MAAM/C,EAAO+C,EAASnC,SAASmC,EAASnC,SAASc,OAAS,GACnD,OAAA1B,IAASD,EAAmBC,GAAQ8C,EAAiB9C,EAAMgD,QAAY,CAChF,CCrMA,MAAMG,EAAe,MACfC,EAAgB,oCCWe,qCALF,8BC8B5B,SACLrC,GAzCF,IAAAsC,EA2CE,MAAMzC,SAACA,EAAAH,SAAUA,EAAW,IAAMM,EAClC,IAAKH,IAAaA,EAASc,OACzB,MAAO,GAGH,MAAA4B,EAAc1C,EAAS2C,IAAIhC,GAE3BwB,EAA6C,CACjD9C,MAAO,QACPW,SAAU,GACV4C,SAAU,aAGR,IAAAC,EAAgD,CAACV,GAErD,IAAA,IAASW,EAAI,EAAGA,EAAI9C,EAASc,OAAQgC,IAAK,CACxC,MAAMtC,EAAOR,EAAS8C,GACtB,IAAKtC,EACH,SAGI,MAAAuC,EAAcL,EAAYI,IAAM,GACtC,IAAIE,EAAM,EAGN,GAAAH,EAAU/B,OAAS,EACrB,KAAUkC,EAAMH,EAAU/B,OAAQkC,IAAO,CACvC,MAAMrD,GAAO,OAAA8C,EAAAI,EAAUG,SAAV,EAAAP,EAAgBQ,UAAW,GAClCrC,EAAQmC,EAAY3B,QAAQzB,GAElC,IAAkB,IAAdiB,EACF,MAGUmC,EAAAG,OAAOtC,EAAO,EAC5B,CAIUiC,EAAAA,EAAU9B,MAAM,EAAGiC,GAG3B,IAAAG,EAAcN,EAAUA,EAAU/B,OAAS,GAC/C,GAAKqC,EAAL,CAIA,IAAA,MAAWF,KAAWF,EAAa,CACjC,MAAMK,EAAUvD,EAASwD,MAAMvD,GAAQA,EAAIC,OAASkD,IAC9CL,EAAWQ,EAAUA,EAAQ/D,MAAQ4D,EACrC7D,EAAyC,CAC7CC,MAAO,QACPU,KAAMS,EAAKT,KACXC,SAAU,GACVoD,UACAR,WACAK,WAGUE,EAAAnD,SAASsD,KAAKlE,GAC1ByD,EAAUS,KAAKlE,GACD+D,EAAA/D,CAChB,CAKI,GAAAD,EAAmBqB,GAAO,CAC5B,MAAM+C,EAAQ/C,EAAKlB,KAAKkE,MAAM,MAC9B,IAAA,IAASC,EAAOF,EAAMzC,OAAQ2C,KAAS,GAC/BF,EAAAL,OAAOO,EAAM,EAAG,MAGZN,EAAAnD,SAAWmD,EAAYnD,SAAS0D,OAC1CH,EAAMZ,KAAKrD,IAAU,CAACD,MAAO,QAASC,WACxC,MAGA6D,EAAYnD,SAAWmD,EAAYnD,SAAS0D,OAAOlD,EAjCrD,CAmCF,CAEA,OAAO2B,EAASnC,QAClB,qOHzEgB,SACd2D,EACA1B,GAEA,MAAM2B,EAAwC,GAC1C,IAAAC,EAEJ,IAAA,IAASf,EAAI,EAAGA,EAAIa,EAAO7C,OAAQgC,IAAK,CACtC,MAAM3C,EAAQwD,EAAOb,GACrB,GAAK3C,EAID,GAACD,EAA4BC,GAOjC,GAAK0D,EAOD,GAAA/B,EAAiB3B,EAAO0D,GACdA,EAAA7D,SAASsD,KAAKnD,QAK5B,IAAKA,EAAME,OAAS,GAAKwD,EAAYxD,MAArC,CACE,MAAMyD,EAAU9B,EAAc7B,EAAO2C,EAAGb,GAExC,GAAa,SAATA,EAAiB,CAQnB,MAAM8B,EAAeF,EAAY7D,SAC/B6D,EAAY7D,SAASc,OAAS,GAG1BkD,SACDD,GAAA,CAAA,EAAA,CACH/D,SAAU,IAAI+D,EAAa/D,SAAU8D,KAIvCD,EAAY7D,SAAS6D,EAAY7D,SAASc,OAAS,GAAKkD,CAAA,MAEtDH,EAA8C7D,SAASsD,KACvDQ,GAKUD,EAAAC,CAEhB,MAGA,IAAK3D,EAAME,OAAS,GAAKwD,EAAYxD,MAArC,CAEQ,MAAA4D,EAAiBL,EAAKA,EAAK9C,OAAS,GACpCoD,EAAQD,GAAkB/B,EAAiB+B,EAAgB9D,GACjE,GAAI+D,EAAO,CACKL,EAAAK,EACFL,EAAA7D,SAASsD,KAAKnD,GAC1B,QACF,CAGc0D,EAAA7B,EAAc7B,EAAO2C,EAAGb,GACtC2B,EAAKN,KAAKO,EAEZ,MAGI,GAAA1D,EAAMC,WAAayD,EAAYzD,SAe3B+D,QAAAC,KAAK,sCAAuCjE,GACpDyD,EAAKN,KAAKnD,OAhBN,CACI,MAAA8D,EAAiBL,EAAKA,EAAK9C,OAAS,GACpCoD,EAAQD,GAAkB/B,EAAiB+B,EAAgB,CAAC5D,MAAOF,EAAME,OAAS,IACxF,GAAI6D,GAASA,EAAM9D,WAAaD,EAAMC,SAAU,CAChCyD,EAAAK,EACFL,EAAA7D,SAASsD,KAAKnD,GAC1B,QAAA,CAEc0D,EAAA7B,EAAc7B,EAAO2C,EAAGb,GACtC2B,EAAKN,KAAKO,EAGd,MA3EgBA,EAAA7B,EAAc7B,EAAO2C,EAAGb,GACtC2B,EAAKN,KAAKO,QARVD,EAAKN,KAAKnD,GACI0D,OAAA,CAsFlB,CAEO,OAAAD,CACT,0DIhJO,SAASS,EAAgB7D,GAC9B,IAAIlB,EAAO,GAQJ,OAPFkB,EAAAR,SAASiB,SAASqD,IACjB7D,EAA8B6D,GAChChF,GAAQgF,EAAQhF,KACPiB,EAA0B+D,KACnChF,GAAQ+E,EAAgBC,GAC1B,IAEKhF,CACT,sBHNO,SACLa,GAEA,MAAMwD,EAASnE,MAAMC,QAAQU,GAASA,EAAQ,CAACA,GAC/C,IAAIb,EAAO,GA0BJ,OAxBAqE,EAAA1C,SAAQ,CAACqD,EAAS1D,KACnB,IAAChB,EAAoB0E,GACvB,OAGF,IAAIC,GAAM,EACFD,EAAAtE,SAASiB,SAAST,IACpBrB,EAAmBqB,IAIrBlB,GAAQiF,GAAOjF,IAASkD,EAAcgC,KAAKlF,KAAUiD,EAAaiC,KAAKhE,EAAKlB,MAAQ,IAAM,GAC1FA,GAAQkB,EAAKlB,KACPiF,GAAA,GAEAA,GAAA,CACR,IAGE3D,IAAU+C,EAAO7C,OAAS,IACpBxB,GAAA,OACV,IAGKA,CACT"}